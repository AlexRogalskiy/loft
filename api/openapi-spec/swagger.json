{
  "definitions": {
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.Account": {
      "description": "Account",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountNamespaceStatus": {
      "description": "AccountNamespaceStatus is the status for the account access objects that belong to the account",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountSpace": {
      "description": "AccountSpace defines properties how many spaces can be owned by the account and how they should be created",
      "properties": {
        "clusterRole": {
          "description": "This defines the cluster role that will be used for the rolebinding when creating a new space for the selected subjects",
          "type": "string"
        },
        "limit": {
          "description": "Limit defines how many spaces are allowed to be owned by this account. If no value is specified, unlimited spaces can be created by the account (if the users have the rights to create spaces)",
          "format": "int32",
          "type": "integer"
        },
        "spaceTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountSpaceTemplate",
          "description": "SpaceTemplate defines a space template with default annotations and labels the space should have after creation"
        },
        "templateInstances": {
          "description": "TemplateInstances are templates that should be created by default in a newly created space by this account. Kiosk makes sure that these templates are deployed successfully, before the users of this account will get access to the space",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountTemplateInstanceTemplate"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountSpaceTemplate": {
      "description": "AccountSpaceTemplate defines a space template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "The default metadata of the space to create"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountSpec": {
      "description": "AccountSpec defines a single account configuration",
      "properties": {
        "space": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountSpace",
          "description": "Space defines default options for created spaces by the account"
        },
        "subjects": {
          "description": "Subjects are the account users",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountStatus": {
      "description": "AccountStatus describes the current status of the account is the cluster",
      "properties": {
        "namespaces": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountNamespaceStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountTemplateInstanceTemplate": {
      "description": "AccountTemplateInstanceTemplate defines a template instance template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "The metadata of the template instance to create"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceSpec",
          "description": "The spec of the template instance"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.EmbeddedResource": {
      "description": "EmbeddedResource holds a kubernetes resource",
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmChart": {
      "description": "HelmChart holds the information needed to find a chart to deploy",
      "properties": {
        "repository": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmChartRepository",
          "description": "Load helm chart from a repository"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmChartRepository": {
      "description": "HelmChartRepository defines a helm repository where kiosk can load a chart from",
      "properties": {
        "insecure": {
          "description": "Determines if the remote location uses an insecure TLS certificate.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the chart to deploy",
          "type": "string"
        },
        "password": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmSecretRef",
          "description": "The password to use for the selected repository"
        },
        "repoUrl": {
          "description": "The repo url to use",
          "type": "string"
        },
        "username": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmSecretRef",
          "description": "The username to use for the selected repository"
        },
        "version": {
          "description": "Version is the version of the chart to deploy",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmConfiguration": {
      "description": "HelmConfiguration holds the helm configuration",
      "properties": {
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmChart",
          "description": "Tells us where to find the helm chart to deploy"
        },
        "releaseName": {
          "description": "The helm release name. If omitted the template name will be used",
          "type": "string"
        },
        "setValues": {
          "description": "Values in the form of name=value that will be passed to the helm command during helm template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmSetValue"
          },
          "type": "array"
        },
        "values": {
          "description": "The additional helm values to use. Expected block string",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmSecretRef": {
      "description": "HelmSecretRef holds a secret reference to a secret",
      "properties": {
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmSetValue": {
      "description": "HelmSetValue defines a name=value pair that will be passed to helm template",
      "properties": {
        "forceString": {
          "description": "ForceString specifies if the parameter `--set` or `--set-string` should be used",
          "type": "boolean"
        },
        "name": {
          "description": "The path of the value to set",
          "type": "string"
        },
        "value": {
          "description": "The value to set",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.RemoteManifest": {
      "properties": {
        "insecure": {
          "description": "Insecure determines if the remote location uses an insecure TLS certificate.",
          "type": "boolean"
        },
        "url": {
          "description": "URL is the path to the remote manifest",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.Template": {
      "description": "Template is the Schema for the templates API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "parameters": {
          "description": "Parameters can be used to replace certain parts of the template. A parameter is referenced by this format: ${NAME}, to parse the value as an expression write ${{NAME}} instead. Besides the parameters defined here, the following predefined parameters can be used: - ${NAMESPACE}: the namespace where the template instance was created - ${ACCOUNT}: the account name of the account that owns the space (if any)",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateParameter"
          },
          "type": "array"
        },
        "resources": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateResources"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstance": {
      "description": "TemplateInstance is the Schema for the templatesinstance API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceParameter": {
      "properties": {
        "name": {
          "description": "Name is the name of the parameter to set",
          "type": "string"
        },
        "value": {
          "description": "Value is the value of the parameter to set",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceSpec": {
      "description": "TemplateInstanceSpec holds the expected cluster status of the template instance",
      "properties": {
        "parameters": {
          "description": "Parameters hold the values of the defined parameters in the template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceParameter"
          },
          "type": "array"
        },
        "sync": {
          "description": "If true the template instance will keep the deployed resources in sync with the template.",
          "type": "boolean"
        },
        "template": {
          "description": "The template to instantiate. This is an immutable field",
          "type": "string"
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstanceStatus": {
      "description": "TemplateInstanceStatus describes the current status of the template instance in the cluster",
      "properties": {
        "message": {
          "description": "A human readable message indicating details about why the namespace is in this condition.",
          "type": "string"
        },
        "observedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "LastAppliedAt indicates when the template was last applied"
        },
        "reason": {
          "description": "A brief CamelCase message indicating details about why the namespace is in this state.",
          "type": "string"
        },
        "status": {
          "description": "Status holds the template instances status",
          "type": "string"
        },
        "templateManifests": {
          "description": "TemplateManifests are the manifests that were rendered before",
          "type": "string"
        },
        "templateResourceVersion": {
          "description": "TemplateResourceVersion is the resource version of the template that was applied",
          "type": "string"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateParameter": {
      "properties": {
        "name": {
          "description": "Name is the name of the parameter",
          "type": "string"
        },
        "required": {
          "description": "If required is true, the template instance must define this parameter, otherwise the deployment will fail.",
          "type": "boolean"
        },
        "validation": {
          "description": "Validation takes a regular expression as value to verify the provided value does match expected values.",
          "type": "string"
        },
        "value": {
          "description": "Value is the default value of the parameter",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateResources": {
      "description": "TemplateResources defines a templates resources",
      "properties": {
        "helm": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.HelmConfiguration",
          "description": "helm defines the configuration for a helm deployment"
        },
        "manifests": {
          "description": "manifest represents kubernetes resources that will be deployed into the target namespace",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.EmbeddedResource"
          },
          "type": "array"
        },
        "remoteManifests": {
          "description": "remote manifests holds urls that should be deployed as part of the template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.RemoteManifest"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.AppliedMetadata": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.AppliedObject": {
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Chart": {
      "description": "Chart describes a chart",
      "properties": {
        "insecureSkipTlsVerify": {
          "description": "If tls certificate checks for the chart download should be skipped",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the chart name in the repository",
          "type": "string"
        },
        "password": {
          "description": "The password that is required for this repository",
          "type": "string"
        },
        "repoURL": {
          "description": "RepoURL is the repo url where the chart can be found",
          "type": "string"
        },
        "username": {
          "description": "The username that is required for this repository",
          "type": "string"
        },
        "version": {
          "description": "Version is the chart version in the repository",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ChartInfo": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ChartInfoSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ChartInfoStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ChartInfoSpec": {
      "properties": {
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Chart",
          "description": "Chart holds information about a chart that should get deployed"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ChartInfoStatus": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "readme": {
          "description": "Readme is the readme of the chart",
          "type": "string"
        },
        "values": {
          "description": "Values are the default values of the chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ClusterQuota": {
      "description": "ClusterQuota holds the virtual cluster information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ClusterQuotaSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ClusterQuotaStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ClusterQuotaSpec": {
      "properties": {
        "quota": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "quota is the quota definition with all the limits and selectors"
        },
        "team": {
          "description": "Team is the name of the team this quota should apply to",
          "type": "string"
        },
        "user": {
          "description": "User is the name of the user this quota should apply to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ClusterQuotaStatus": {
      "properties": {
        "namespaces": {
          "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.UserOrTeam",
          "description": "Owner describes the owner of the space. This can be either empty (nil), be a team or an loft user. If the space has an account that does not belong to an user / team in loft this is empty"
        },
        "total": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Total defines the actual enforced quota and its current usage across all projects"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo": {
      "properties": {
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "The users email address",
          "type": "string"
        },
        "name": {
          "description": "Name is the kubernetes name of the object",
          "type": "string"
        },
        "subject": {
          "description": "The user subject",
          "type": "string"
        },
        "username": {
          "description": "The username that is used to login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EpochInfo": {
      "description": "EpochInfo holds information about how long the space was sleeping in the epoch",
      "properties": {
        "slept": {
          "description": "Amount of milliseconds the space has slept in the epoch",
          "format": "int64",
          "type": "integer"
        },
        "start": {
          "description": "Timestamp when the epoch has started",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.HelmRelease": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.HelmReleaseSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.HelmReleaseStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.HelmReleaseSpec": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are extra annotations for this helm release",
          "type": "object"
        },
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Chart",
          "description": "Chart holds information about a chart that should get deployed"
        },
        "manifests": {
          "description": "Manifests holds kube manifests that will be deployed as a chart",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters are additional helm chart values that will get merged with config and are then used to deploy the helm chart.",
          "type": "string"
        },
        "values": {
          "description": "Values is the set of extra Values added to the chart. These values merge with the default values inside of the chart. You can use golang templating in here with values from parameters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.HelmReleaseStatus": {
      "properties": {
        "info": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Info",
          "description": "Info provides information about a release"
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "version": {
          "description": "Revision is an int which represents the revision of the release.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Info": {
      "description": "Info describes release information.",
      "properties": {
        "deleted": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Deleted tracks when this object was deleted."
        },
        "description": {
          "description": "Description is human-friendly \"log entry\" about this release.",
          "type": "string"
        },
        "first_deployed": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "FirstDeployed is when the release was first deployed."
        },
        "last_deployed": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "LastDeployed is when the release was last deployed."
        },
        "notes": {
          "description": "Contains the rendered templates/NOTES.txt if available",
          "type": "string"
        },
        "status": {
          "description": "Status is the current state of the release",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.LastActivityInfo": {
      "description": "LastActivityInfo holds information about the last activity",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the api group that was used for the request",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource",
          "type": "string"
        },
        "resource": {
          "description": "Resource is the resource of the request",
          "type": "string"
        },
        "subject": {
          "description": "Subject is the user or team where this activity was recorded",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the subresource of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the verb that was used for the request",
          "type": "string"
        },
        "virtualCluster": {
          "description": "VirtualCluster is the virtual cluster this activity happened in",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.LocalClusterAccess": {
      "description": "LocalClusterAccess holds the cluster access information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.LocalClusterAccessSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.LocalClusterAccessStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.LocalClusterAccessSpec": {
      "properties": {
        "clusterRoles": {
          "description": "ClusterRoles define the cluster roles that the users should have assigned in the cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterRoleRef"
          },
          "type": "array"
        },
        "description": {
          "description": "Description is the description of this object in human-readable text.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be shown in the UI",
          "type": "string"
        },
        "priority": {
          "description": "Priority is a unique value that specifies the priority of this cluster access for the space constraints and quota. A higher priority means the cluster access object will override the space constraints of lower priority cluster access objects",
          "format": "int32",
          "type": "integer"
        },
        "quota": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.AccessQuota",
          "description": "Quota defines the quotas for the members that should be created."
        },
        "spaceConstraintsRef": {
          "description": "SpaceConstraintsRef is a reference to a space constraints object",
          "type": "string"
        },
        "teams": {
          "description": "Teams are the teams affected by this cluster access object",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "Users are the users affected by this cluster access object",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.UserOrTeam"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.LocalClusterAccessStatus": {
      "properties": {
        "spaceConstraint": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.UserOrTeam"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Maintainer": {
      "description": "Maintainer describes a Chart maintainer.",
      "properties": {
        "email": {
          "description": "Email is an optional email address to contact the named maintainer",
          "type": "string"
        },
        "name": {
          "description": "Name is a user name or organization name",
          "type": "string"
        },
        "url": {
          "description": "URL is an optional URL to an address for the named maintainer",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Metadata": {
      "description": "Metadata for a Chart file. This models the structure of a Chart.yaml file.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are additional mappings uninterpreted by Helm, made available for inspection by other applications.",
          "type": "object"
        },
        "apiVersion": {
          "description": "The API Version of this chart.",
          "type": "string"
        },
        "appVersion": {
          "description": "The version of the application enclosed inside of this chart.",
          "type": "string"
        },
        "condition": {
          "description": "The condition to check to enable chart",
          "type": "string"
        },
        "deprecated": {
          "description": "Whether or not this chart is deprecated",
          "type": "boolean"
        },
        "description": {
          "description": "A one-sentence description of the chart",
          "type": "string"
        },
        "home": {
          "description": "The URL to a relevant project page, git repo, or contact person",
          "type": "string"
        },
        "icon": {
          "description": "The URL to an icon file.",
          "type": "string"
        },
        "keywords": {
          "description": "A list of string keywords",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kubeVersion": {
          "description": "KubeVersion is a SemVer constraint specifying the version of Kubernetes required.",
          "type": "string"
        },
        "maintainers": {
          "description": "A list of name and URL/email address combinations for the maintainer(s)",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Maintainer"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the chart",
          "type": "string"
        },
        "sources": {
          "description": "Source is the URL to the source code of this chart",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "description": "The tags to check to enable chart",
          "type": "string"
        },
        "type": {
          "description": "Specifies the chart type: application or library",
          "type": "string"
        },
        "urls": {
          "description": "Urls where to find the chart contents",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "A SemVer 2 conformant version string of the chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SleepModeConfig": {
      "description": "SleepModeConfig holds the sleepmode information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SleepModeConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SleepModeConfigStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SleepModeConfigSpec": {
      "properties": {
        "deleteAfter": {
          "description": "DeleteAfter specifies after how many seconds of inactivity the space should be deleted",
          "format": "int64",
          "type": "integer"
        },
        "deleteAllPods": {
          "description": "If true will delete all pods on sleep in the space regardless of if they have a parent set",
          "type": "boolean"
        },
        "forceSleep": {
          "description": "If force sleep is true the space will sleep",
          "type": "boolean"
        },
        "forceSleepDuration": {
          "description": "If force sleep duration is set, this will force the space to sleep for the given duration. It also implies that forceSleep is true. During this period loft will also block certain requests to that space. If this is set to 0, it means the space will sleep until it is manually woken up via the cli or ui.",
          "format": "int64",
          "type": "integer"
        },
        "sleepAfter": {
          "description": "SleepAfter specifies after how many seconds of inactivity the space should sleep",
          "format": "int64",
          "type": "integer"
        },
        "sleepSchedule": {
          "description": "SleepSchedule specifies scheduled space sleep in Cron format, see https://en.wikipedia.org/wiki/Cron. Note: timezone defined in the schedule string will be ignored. Use \".Spec.Timezone\" field instead.",
          "type": "string"
        },
        "timezone": {
          "description": "Timezone specifies time zone used for scheduled space operations. Defaults to UTC. Accepts the same format as time.LoadLocation() in Go (https://pkg.go.dev/time#LoadLocation). The value should be a location name corresponding to a file in the IANA Time Zone database, such as \"America/New_York\".",
          "type": "string"
        },
        "wakeupSchedule": {
          "description": "WakeupSchedule specifies scheduled wakeup from sleep in Cron format, see https://en.wikipedia.org/wiki/Cron. Note: timezone defined in the schedule string will be ignored. Use \".Spec.Timezone\" field instead.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SleepModeConfigStatus": {
      "properties": {
        "currentEpoch": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EpochInfo",
          "description": "Optional info that indicates how long the space was sleeping in the current epoch"
        },
        "lastActivity": {
          "description": "LastActivity indicates the last activity in the namespace",
          "format": "int64",
          "type": "integer"
        },
        "lastActivityInfo": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.LastActivityInfo",
          "description": "LastActivityInfo holds information about the last activity within this space"
        },
        "lastEpoch": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EpochInfo",
          "description": "Optional info that indicates how long the space was sleeping in the current epoch"
        },
        "scheduledSleep": {
          "description": "Indicates time of the next scheduled sleep based on .Spec.SleepSchedule and .Spec.ScheduleTimeZone The time is a Unix time, the number of seconds elapsed since January 1, 1970 UTC",
          "format": "int64",
          "type": "integer"
        },
        "scheduledWakeup": {
          "description": "Indicates time of the next scheduled wakeup based on .Spec.WakeupSchedule and .Spec.ScheduleTimeZone The time is a Unix time, the number of seconds elapsed since January 1, 1970 UTC",
          "format": "int64",
          "type": "integer"
        },
        "sleepType": {
          "description": "SleepType specifies a type of sleep, which has effect on which actions will cause the space to wake up.",
          "type": "string"
        },
        "sleepingSince": {
          "description": "SleepingSince specifies since when the space is sleeping (if this is not specified, loft assumes the space is not sleeping)",
          "format": "int64",
          "type": "integer"
        },
        "sleptLastSevenDays": {
          "description": "This is a calculated field that will be returned but not saved and describes the percentage since the space was created or the last 7 days the space has slept",
          "format": "double",
          "type": "number"
        },
        "sleptLastThirtyDays": {
          "description": "This is a calculated field that will be returned but not saved and describes the percentage since the space was created or the last 30 days the space has slept",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Space": {
      "description": "Space",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SpaceSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SpaceStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SpaceConstraintNamespaceStatus": {
      "properties": {
        "appliedClusterRole": {
          "description": "AppliedClusterRole is the cluster role that was bound to this namespace",
          "type": "string"
        },
        "appliedMetadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.AppliedMetadata",
          "description": "AppliedMetadata is the metadata that was applied on the space"
        },
        "appliedObjects": {
          "description": "AppliedObjects are the objects that were applied on this namespace",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.AppliedObject"
          },
          "type": "array"
        },
        "message": {
          "description": "Message is the human-readable message why this space is in this phase",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration of the space constraint",
          "format": "int64",
          "type": "integer"
        },
        "phase": {
          "description": "Phase the namespace is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason why this namespace is in the current phase",
          "type": "string"
        },
        "spaceConstraint": {
          "description": "SpaceConstraint are the applied space constraints",
          "type": "string"
        },
        "team": {
          "description": "Team that was used to apply the space constraints",
          "type": "string"
        },
        "user": {
          "description": "User that was used to apply the space constraints",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SpaceSpec": {
      "description": "SpaceSpec defines the desired state of Space",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "team": {
          "description": "Team is the owning team of the space",
          "type": "string"
        },
        "user": {
          "description": "User is the owning user of the space",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SpaceStatus": {
      "description": "SpaceStatus defines the observed state of Space",
      "properties": {
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.UserOrTeam",
          "description": "Owner describes the owner of the space. This can be either empty (nil), be a team or an loft user. If the space has an account that does not belong to an user / team in loft this is empty"
        },
        "phase": {
          "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "type": "string"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SleepModeConfig",
          "description": "SleepModeConfig is the sleep mode config of the space"
        },
        "spaceConstraint": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "SpaceConstraint describes the space constraint of the space."
        },
        "spaceConstraintStatus": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SpaceConstraintNamespaceStatus",
          "description": "SpaceConstraintStatus describes the space constraint status."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.UserOrTeam": {
      "properties": {
        "team": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "Team describes a team"
        },
        "user": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "User describes an user"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.VirtualCluster": {
      "description": "VirtualCluster holds the virtual cluster information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.VirtualClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.VirtualClusterStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.VirtualClusterSpec": {
      "properties": {
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "The helm release configuration for the virtual cluster. This is optional, but when filled, loft will deploy the specified chart for the given"
        },
        "kubeConfigRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.SecretRef",
          "description": "A reference to the cluster admin kube config. This is needed for the cli & ui to access the virtual clusters"
        },
        "pod": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.PodSelector",
          "description": "A label selector to select the virtual cluster pod to route incoming requests to."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.VirtualClusterStatus": {
      "properties": {
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "controlPlaneReady": {
          "description": "ControlPlaneReady defines if the virtual cluster control plane is ready.",
          "type": "boolean"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus",
          "description": "DEPRECATED: do not use anymore the status of the helm release that was used to deploy the virtual cluster"
        },
        "message": {
          "description": "Message describes the reason in human readable form why the cluster is in the currrent phase",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "phase": {
          "description": "Phase describes the current phase the virtual cluster is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes the reason in machine readable form why the cluster is in the current phase",
          "type": "string"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SleepModeConfig",
          "description": "SleepModeConfig is the sleep mode config of the space"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.AccessQuota": {
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuota": {
      "description": "ClusterQuota is the Schema for the cluster quotas api",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuotaSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuotaStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuotaSpec": {
      "description": "ClusterQuotaSpec defines the desired state of ClusterQuota",
      "properties": {
        "quota": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "quota is the quota definition with all the limits and selectors"
        },
        "team": {
          "description": "Team is the name of the team this quota should apply to",
          "type": "string"
        },
        "user": {
          "description": "User is the name of the user this quota should apply to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuotaStatus": {
      "description": "ClusterQuotaStatus defines the observed state of ClusterQuota",
      "properties": {
        "namespaces": {
          "description": "Namespaces slices the usage by project.  This division allows for quick resolution of deletion reconciliation inside of a single project without requiring a recalculation across all projects.  This can be used to pull the deltas for a given project.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace"
          },
          "type": "array"
        },
        "total": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Total defines the actual enforced quota and its current usage across all projects"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuotaStatusByNamespace": {
      "description": "ClusterQuotaStatusByNamespace holds the status of a specific namespace",
      "properties": {
        "namespace": {
          "description": "Namespace of the account this account quota applies to",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Status indicates how many resources have been consumed by this project"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterRoleRef": {
      "properties": {
        "name": {
          "description": "Name is the cluster role to assign",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterRoleTemplateTemplate": {
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller."
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Standard object's metadata."
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.Condition": {
      "description": "Condition defines an observation of a Cluster API resource operational state.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable."
        },
        "message": {
          "description": "A human readable message indicating details about the transition. This field may be empty.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition in CamelCase. The specific API may choose whether this field is considered a guaranteed API. This field may not be empty.",
          "type": "string"
        },
        "severity": {
          "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterAccess": {
      "description": "LocalClusterAccess holds the cluster access information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterAccessSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterAccessStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterAccessSpec": {
      "properties": {
        "clusterRoles": {
          "description": "ClusterRoles define the cluster roles that the users should have assigned in the cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterRoleRef"
          },
          "type": "array"
        },
        "description": {
          "description": "Description is the description of this object in human-readable text.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be shown in the UI",
          "type": "string"
        },
        "priority": {
          "description": "Priority is a unique value that specifies the priority of this cluster access for the space constraints and quota. A higher priority means the cluster access object will override the space constraints of lower priority cluster access objects",
          "format": "int32",
          "type": "integer"
        },
        "quota": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.AccessQuota",
          "description": "Quota defines the quotas for the members that should be created."
        },
        "spaceConstraintsRef": {
          "description": "SpaceConstraintsRef is a reference to a space constraints object",
          "type": "string"
        },
        "teams": {
          "description": "Teams are the teams affected by this cluster access object",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "Users are the users affected by this cluster access object",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.UserOrTeam"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterAccessStatus": {
      "description": "LocalClusterAccessStatus holds the status of a user access",
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterRoleTemplate": {
      "description": "LocalClusterRoleTemplate holds a cluster role configuration",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateSpec": {
      "properties": {
        "clusterRoleTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterRoleTemplateTemplate",
          "description": "ClusterRoleTemplate holds the cluster role template"
        },
        "description": {
          "description": "Description is the description of this object in human-readable text.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be shown in the UI",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateStatus": {
      "description": "LocalClusterRoleTemplateStatus holds the status of a user access",
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalSpaceConstraint": {
      "description": "LocalSpaceConstraint holds the space constraints",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalSpaceConstraintSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalSpaceConstraintStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalSpaceConstraintSpec": {
      "properties": {
        "description": {
          "description": "Description is the description of this object in human-readable text.",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be shown in the UI",
          "type": "string"
        },
        "spaceTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.SpaceTemplate",
          "description": "SpaceTemplate holds the space configuration"
        },
        "sync": {
          "description": "Sync specifies if spaces that were created through this space constraint object should get synced with this object.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalSpaceConstraintStatus": {
      "description": "LocalSpaceConstraintStatus holds the status of a user access",
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalTeam": {
      "description": "LocalTeam holds the cluster user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalTeamSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalTeamStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalTeamSpec": {
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalTeamStatus": {
      "description": "LocalTeamStatus holds the status of a user access",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are the annotations of the user",
          "type": "object"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "groups": {
          "description": "The groups defined in a token that belong to a team",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are the labels of the user",
          "type": "object"
        },
        "username": {
          "description": "The username of the team that will be used for identification and docker registry namespace",
          "type": "string"
        },
        "users": {
          "description": "The loft users that belong to a team",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalUser": {
      "description": "LocalUser holds the cluster user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalUserSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalUserStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalUserSpec": {
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalUserStatus": {
      "description": "LocalUserStatus holds the status of a user access",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are the annotations of the user",
          "type": "object"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "The users email address",
          "type": "string"
        },
        "groups": {
          "description": "The groups the user has access to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are the labels of the user",
          "type": "object"
        },
        "subject": {
          "description": "The user subject as presented by the token",
          "type": "string"
        },
        "teams": {
          "description": "Teams the user is currently part of",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "username": {
          "description": "The username that is used to login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.PodSelector": {
      "properties": {
        "podSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label selector to select the virtual cluster pod to route incoming requests to."
        },
        "port": {
          "description": "The port of the pod to route to",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.SecretRef": {
      "description": "SecretRef is the reference to a secret containing the user password",
      "properties": {
        "key": {
          "type": "string"
        },
        "secretName": {
          "type": "string"
        },
        "secretNamespace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.SpaceTemplate": {
      "description": "SpaceTemplate defines properties how many spaces can be owned by the account and how they should be created",
      "properties": {
        "clusterRole": {
          "description": "This defines the cluster role that will be used for the rolebinding when creating a new space for the selected subjects",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "The enforced metadata of the space to create. Currently only annotations and labels are supported"
        },
        "objects": {
          "description": "Objects are Kubernetes style yamls that should get deployed into the space",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.UserOrTeam": {
      "properties": {
        "team": {
          "description": "Name of a Loft team the user is part of",
          "type": "string"
        },
        "user": {
          "description": "Name of a Loft user",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualCluster": {
      "description": "VirtualCluster holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmChart": {
      "properties": {
        "name": {
          "description": "the name of the helm chart",
          "type": "string"
        },
        "repo": {
          "description": "the repo of the helm chart",
          "type": "string"
        },
        "version": {
          "description": "the version of the helm chart to use",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease": {
      "properties": {
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmChart",
          "description": "infos about what chart to deploy"
        },
        "values": {
          "description": "the values for the given chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus": {
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "release": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "the release that was deployed"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterSpec": {
      "properties": {
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "The helm release configuration for the virtual cluster. This is optional, but when filled, loft will deploy the specified chart for the given"
        },
        "kubeConfigRef": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.SecretRef",
          "description": "A reference to the cluster admin kube config. This is needed for the cli & ui to access the virtual clusters"
        },
        "pod": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.PodSelector",
          "description": "A label selector to select the virtual cluster pod to route incoming requests to."
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterStatus": {
      "description": "VirtualClusterStatus holds the status of a virtual cluster",
      "properties": {
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "controlPlaneReady": {
          "description": "ControlPlaneReady defines if the virtual cluster control plane is ready.",
          "type": "boolean"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmReleaseStatus",
          "description": "DEPRECATED: do not use anymore the status of the helm release that was used to deploy the virtual cluster"
        },
        "message": {
          "description": "Message describes the reason in human readable form why the cluster is in the currrent phase",
          "type": "string"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "phase": {
          "description": "Phase describes the current phase the virtual cluster is in",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes the reason in machine readable form why the cluster is in the current phase",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.audit.v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the name of the API group that contains the referred object. The empty string represents the core API group.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion is the version of the API group that contains the referred object.",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "resource": {
          "type": "string"
        },
        "resourceVersion": {
          "type": "string"
        },
        "subresource": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Analytics": {
      "properties": {
        "batchEndpoint": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "requests": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResoureRequests"
          },
          "type": "array"
        },
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Announcement": {
      "description": "Announcement holds the announcement information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AnnouncementSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AnnouncementStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Announcement",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AnnouncementList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Announcement"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "AnnouncementList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AnnouncementSpec": {
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AnnouncementStatus": {
      "properties": {
        "analyticsToken": {
          "description": "AnalyticsToken is a token signed for the user that is used by the frontend",
          "type": "string"
        },
        "announcement": {
          "description": "Announcement is the html announcement that should be displayed in the frontend",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.App": {
      "description": "App holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AppSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AppStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AppList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "AppList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AppSpec": {
      "description": "AppSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.HelmReleaseSpec",
          "description": "Config is the helm config to use to deploy the helm release"
        },
        "description": {
          "description": "Description describes an app",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "helm": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmConfiguration",
          "description": "DEPRECATED: Use config instead helm defines the configuration for a helm deployment"
        },
        "icon": {
          "description": "Icon holds an URL to the app icon",
          "type": "string"
        },
        "manifests": {
          "description": "DEPRECATED: Use config instead manifest represents kubernetes resources that will be deployed into the target namespace",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "parameters": {
          "description": "Parameters define additional app parameters that will set helm values",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AppParameter"
          },
          "type": "array"
        },
        "readme": {
          "description": "Readme is a longer markdown string that describes the app.",
          "type": "string"
        },
        "recommendedApp": {
          "description": "RecommendedApp specifies where this app should show up as recommended app",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "releaseName": {
          "description": "ReleaseName is the preferred release name of the app",
          "type": "string"
        },
        "streamContainer": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.StreamContainer",
          "description": "StreamContainer can be used to stream a containers logs instead of the helm output."
        },
        "timeout": {
          "description": "Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)",
          "type": "string"
        },
        "wait": {
          "description": "Wait determines if Loft should wait during deploy for the app to become ready",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AppStatus": {
      "description": "AppStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Apps": {
      "description": "Apps holds configuration for apps that should be shown",
      "properties": {
        "noDefault": {
          "description": "If this option is true, loft will not try to parse the default apps",
          "type": "boolean"
        },
        "predefinedApps": {
          "description": "Predefined apps that can be selected in the Spaces > Space menu",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.PredefinedApp"
          },
          "type": "array"
        },
        "repositories": {
          "description": "These are additional repositories that are parsed by loft",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmChartRepository"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Audit": {
      "description": "Audit holds the audit configuration options for loft. Changing any options will require a loft restart to take effect.",
      "properties": {
        "compress": {
          "description": "Compress determines if the rotated log files should be compressed using gzip. The default is not to perform compression.",
          "type": "boolean"
        },
        "dataStoreEndpoint": {
          "description": "DataStoreEndpoint is an endpoint to store events in.",
          "type": "string"
        },
        "dataStoreTTL": {
          "description": "DataStoreMaxAge is the maximum number of hours to retain old log events in the datastore",
          "format": "int32",
          "type": "integer"
        },
        "enabled": {
          "description": "If audit is enabled and incoming api requests will be logged based on the supplied policy.",
          "type": "boolean"
        },
        "level": {
          "description": "Level is an optional log level for audit logs. Cannot be used together with policy",
          "format": "int32",
          "type": "integer"
        },
        "maxAge": {
          "description": "MaxAge is the maximum number of days to retain old log files based on the timestamp encoded in their filename.  Note that a day is defined as 24 hours and may not exactly correspond to calendar days due to daylight savings, leap seconds, etc. The default is not to remove old log files based on age.",
          "format": "int32",
          "type": "integer"
        },
        "maxBackups": {
          "description": "MaxBackups is the maximum number of old log files to retain.  The default is to retain all old log files (though MaxAge may still cause them to get deleted.)",
          "format": "int32",
          "type": "integer"
        },
        "maxSize": {
          "description": "MaxSize is the maximum size in megabytes of the log file before it gets rotated. It defaults to 100 megabytes.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "The path where to save the audit log files. This is required if audit is enabled. Backup log files will be retained in the same directory.",
          "type": "string"
        },
        "policy": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuditPolicy",
          "description": "The audit policy to use and log requests. By default loft will not log anything"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuditPolicy": {
      "description": "AuditPolicy describes the audit policy to use for loft",
      "properties": {
        "omitStages": {
          "description": "OmitStages is a list of stages for which no events are created. Note that this can also be specified per rule in which case the union of both are omitted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "rules": {
          "description": "Rules specify the audit Level a request should be recorded at. A request may match multiple rules, in which case the FIRST matching rule is used. The default audit level is None, but can be overridden by a catch-all rule at the end of the list. PolicyRules are strictly ordered.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuditPolicyRule"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuditPolicyRule": {
      "description": "AuditPolicy describes a policy for auditing",
      "properties": {
        "clusters": {
          "description": "Clusters that this rule matches. Only applies to cluster requests. If this is set, no events for non cluster requests will be created. An empty list means no restrictions will apply.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "level": {
          "description": "The Level that requests matching this rule are recorded at.",
          "type": "string"
        },
        "namespaces": {
          "description": "Namespaces that this rule matches. The empty string \"\" matches non-namespaced resources. An empty list implies every namespace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of URL paths that should be audited. *s are allowed, but only as the full, final step in the path. Examples:\n \"/metrics\" - Log requests for apiserver metrics\n \"/healthz*\" - Log all health checks",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "omitStages": {
          "description": "OmitStages is a list of stages for which no events are created. Note that this can also be specified policy wide in which case the union of both are omitted. An empty list means no restrictions will apply.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestTargets": {
          "description": "RequestTargets is a list of request targets for which events are created. An empty list implies every request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources that this rule matches. An empty list implies all kinds in all API groups.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.GroupResources"
          },
          "type": "array"
        },
        "userGroups": {
          "description": "The user groups this rule applies to. A user is considered matching if it is a member of any of the UserGroups. An empty list implies every user group.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "The users (by authenticated user name) this rule applies to. An empty list implies every user.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "The verbs that match this rule. An empty list implies every verb.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "level"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Authentication": {
      "description": "Authentication holds authentication relevant information",
      "properties": {
        "github": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGithub",
          "description": "Github holds github authentication configuration"
        },
        "gitlab": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGitlab",
          "description": "Gitlab holds gitlab authentication configuration"
        },
        "google": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGoogle",
          "description": "Google holds google authentication configuration"
        },
        "microsoft": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationMicrosoft",
          "description": "Microsoft holds microsoft authentication configuration"
        },
        "oidc": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationOIDC",
          "description": "OIDC holds oidc authentication configuration"
        },
        "password": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationPassword",
          "description": "Password holds password authentication relevant information"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGithub": {
      "properties": {
        "clientId": {
          "description": "ClientID holds the github client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientID holds the github client secret",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "hostName": {
          "description": "Required ONLY for GitHub Enterprise. This is the Hostname of the GitHub Enterprise account listed on the management console. Ensure this domain is routable on your network.",
          "type": "string"
        },
        "orgs": {
          "description": "Loft queries the following organizations for group information. Group claims are formatted as \"(org):(team)\". For example if a user is part of the \"engineering\" team of the \"coreos\" org, the group claim would include \"coreos:engineering\".\n\nIf orgs are specified in the config then user MUST be a member of at least one of the specified orgs to authenticate with loft.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGithubOrg"
          },
          "type": "array"
        },
        "redirectURI": {
          "description": "RedirectURI holds the redirect URI. Should be https://loft.domain.tld/auth/github/callback",
          "type": "string"
        },
        "rootCA": {
          "description": "ONLY for GitHub Enterprise. Optional field. Used to support self-signed or untrusted CA root certificates.",
          "type": "string"
        }
      },
      "required": [
        "clientSecret",
        "redirectURI"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGithubOrg": {
      "description": "AuthenticationGithubOrg holds org-team filters, in which teams are optional.",
      "properties": {
        "name": {
          "description": "Organization name in github (not slug, full name). Only users in this github organization can authenticate.",
          "type": "string"
        },
        "teams": {
          "description": "Names of teams in a github organization. A user will be able to authenticate if they are members of at least one of these teams. Users in the organization can authenticate if this field is omitted from the config file.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGitlab": {
      "properties": {
        "baseURL": {
          "description": "BaseURL is optional, default = https://gitlab.com",
          "type": "string"
        },
        "clientId": {
          "description": "Gitlab client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "Gitlab client secret",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "groups": {
          "description": "Optional groups whitelist, communicated through the \"groups\" scope. If `groups` is omitted, all of the user's GitLab groups are returned. If `groups` is provided, this acts as a whitelist - only the user's GitLab groups that are in the configured `groups` below will go into the groups claim. Conversely, if the user is not in any of the configured `groups`, the user will not be authenticated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "redirectURI": {
          "description": "Redirect URI",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "redirectURI"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGoogle": {
      "properties": {
        "adminEmail": {
          "description": "Required if ServiceAccountFilePath The email of a GSuite super user which the service account will impersonate when listing groups",
          "type": "string"
        },
        "clientId": {
          "description": "Google client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "Google client secret",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "groups": {
          "description": "Optional list of whitelisted groups If this field is nonempty, only users from a listed group will be allowed to log in",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hostedDomains": {
          "description": "Optional list of whitelisted domains If this field is nonempty, only users from a listed domain will be allowed to log in",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "redirectURI": {
          "description": "loft redirect uri. E.g. https://loft.my.domain/auth/google/callback",
          "type": "string"
        },
        "scopes": {
          "description": "defaults to \"profile\" and \"email\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "serviceAccountFilePath": {
          "description": "Optional path to service account json If nonempty, and groups claim is made, will use authentication from file to check groups with the admin directory api",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "redirectURI"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate": {
      "properties": {
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "group": {
          "description": "Group is the name of the group that should be matched",
          "type": "string"
        }
      },
      "required": [
        "group"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationMicrosoft": {
      "properties": {
        "clientId": {
          "description": "Microsoft client id",
          "type": "string"
        },
        "clientSecret": {
          "description": "Microsoft client secret",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "groups": {
          "description": "It is possible to require a user to be a member of a particular group in order to be successfully authenticated in loft.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "onlySecurityGroups": {
          "description": "configuration option restricts the list to include only security groups. By default all groups (security, Office 365, mailing lists) are included.",
          "type": "boolean"
        },
        "redirectURI": {
          "description": "loft redirect uri. Usually https://loft.my.domain/auth/microsoft/callback",
          "type": "string"
        },
        "tenant": {
          "description": "tenant configuration parameter controls what kinds of accounts may be authenticated in loft. By default, all types of Microsoft accounts (consumers and organizations) can authenticate in loft via Microsoft. To change this, set the tenant parameter to one of the following:\n\ncommon - both personal and business/school accounts can authenticate in loft via Microsoft (default) consumers - only personal accounts can authenticate in loft organizations - only business/school accounts can authenticate in loft <tenant uuid> or <tenant name> - only accounts belonging to specific tenant identified by either <tenant uuid> or <tenant name> can authenticate in loft",
          "type": "string"
        },
        "useGroupsAsWhitelist": {
          "description": "Restrict the groups claims to include only the user’s groups that are in the configured groups",
          "type": "boolean"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "redirectURI"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationOIDC": {
      "properties": {
        "caFile": {
          "description": "Path to a PEM encoded root certificate of the provider. Optional",
          "type": "string"
        },
        "clientId": {
          "description": "ClientID the JWT must be issued for, the \"sub\" field. This plugin only trusts a single client to ensure the plugin can be used with public providers.\n\nThe plugin supports the \"authorized party\" OpenID Connect claim, which allows specialized providers to issue tokens to a client for a different client. See: https://openid.net/specs/openid-connect-core-1_0.html#IDToken",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret to issue tokens from the OIDC provider",
          "type": "string"
        },
        "clusterAccountTemplates": {
          "description": "Cluster Account Templates that will be applied for users logging in through this authentication",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "getUserInfo": {
          "description": "GetUserInfo, if specified, tells the OIDCAuthenticator to try to populate the user's information from the UserInfo.",
          "type": "boolean"
        },
        "groupClusterAccountTemplates": {
          "description": "A mapping between groups and cluster account templates. If the user has a certain group, the cluster account template will be added during creation",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationGroupClusterAccountTemplate"
          },
          "type": "array"
        },
        "groups": {
          "description": "If required groups is non empty, access is denied if the user is not part of at least one of the specified groups.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "groupsClaim": {
          "description": "GroupsClaim, if specified, causes the OIDCAuthenticator to try to populate the user's groups with an ID Token field. If the GroupsClaim field is present in an ID Token the value must be a string or list of strings.",
          "type": "string"
        },
        "groupsPrefix": {
          "description": "GroupsPrefix, if specified, causes claims mapping to group names to be prefixed with the value. A value \"oidc:\" would result in groups like \"oidc:engineering\" and \"oidc:marketing\".",
          "type": "string"
        },
        "insecureCa": {
          "description": "Specify whether to communicate without validating SSL certificates",
          "type": "boolean"
        },
        "issuerUrl": {
          "description": "IssuerURL is the URL the provider signs ID Tokens as. This will be the \"iss\" field of all tokens produced by the provider and is used for configuration discovery.\n\nThe URL is usually the provider's URL without a path, for example \"https://accounts.google.com\" or \"https://login.salesforce.com\".\n\nThe provider must implement configuration discovery. See: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig",
          "type": "string"
        },
        "redirectURI": {
          "description": "loft redirect uri. E.g. https://loft.my.domain/auth/oidc/callback",
          "type": "string"
        },
        "type": {
          "description": "Type of the OIDC to show in the UI. Only for displaying purposes",
          "type": "string"
        },
        "usernameClaim": {
          "description": "UsernameClaim is the JWT field to use as the user's username.",
          "type": "string"
        },
        "usernamePrefix": {
          "description": "UsernamePrefix, if specified, causes claims mapping to username to be prefix with the provided value. A value \"oidc:\" would result in usernames like \"oidc:john\".",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.AuthenticationPassword": {
      "properties": {
        "disabled": {
          "description": "If true login via password is disabled",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster": {
      "description": "Cluster holds the cluster information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess": {
      "description": "ClusterAccess holds the globalClusterAccess information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccessSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccessStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccessList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterAccessList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccessSpec": {
      "description": "ClusterAccessSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters are the clusters this template should be applied on.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "localClusterAccessTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.LocalClusterAccessTemplate",
          "description": "LocalClusterAccessTemplate holds the cluster access template"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccessStatus": {
      "description": "ClusterAccessStatus holds the status",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        },
        "spaceConstraint": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
        },
        "teams": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.UserOrTeam"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate": {
      "description": "ClusterAccountTemplate holds the clusterAccountTemplate information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplateStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplate",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplateList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplateSpec": {
      "description": "ClusterAccountTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "accountTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccountTemplate",
          "description": "Template is the account template that will be used to create a new account"
        },
        "clusterSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Selects the target clusters this account template should be applied to. An empty cluster selector selects all clusters"
        },
        "clusters": {
          "description": "Clusters are the clusters this template should be applied on.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "owns": {
          "description": "Owns are resources that will be created in the target cluster for the account Furthermore the account will be added as owner reference in this resources.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplateStatus": {
      "description": "ClusterAccountTemplateStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccounts": {
      "properties": {
        "accounts": {
          "description": "Accounts are the accounts that belong to the user in the cluster",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cluster": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Cluster",
          "description": "Cluster is the cluster object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterCharts": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "busy": {
          "description": "Busy will indicate if the chart parsing is still in progress.",
          "type": "boolean"
        },
        "charts": {
          "description": "Holds the available helm charts for this cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmChart"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "required": [
        "charts"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterCharts",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnect": {
      "description": "ClusterConnect holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnectSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnectStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterConnect",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnectSpec": {
      "properties": {
        "adminUser": {
          "description": "The user to create an admin account for",
          "type": "string"
        },
        "clusterTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster",
          "description": "the cluster template to create"
        },
        "config": {
          "description": "the kube config used to connect the cluster",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnectStatus": {
      "properties": {
        "failed": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterDomain": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "target": {
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterDomain",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMember": {
      "properties": {
        "info": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "Info about the user or team"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMemberAccess": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "teams": {
          "description": "Teams holds all the teams that the current user has access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMember"
          },
          "type": "array"
        },
        "users": {
          "description": "Users holds all the users that the current user has access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMember"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterMemberAccess",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMembers": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "teams": {
          "description": "Teams holds all the teams that have access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMember"
          },
          "type": "array"
        },
        "users": {
          "description": "Users holds all the users that have access to the cluster",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMember"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterMembers",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterReset": {
      "properties": {
        "agent": {
          "type": "boolean"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "rbac": {
          "type": "boolean"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterReset",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate": {
      "description": "ClusterRoleTemplate holds the clusterRoleTemplate information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplateStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplateList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplateSpec": {
      "description": "ClusterRoleTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters are the clusters this template should be applied on.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a cluster role template object",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "localClusterRoleTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.LocalClusterRoleTemplate",
          "description": "LocalClusterRoleTemplate holds the cluster role template"
        },
        "management": {
          "description": "Management defines if this cluster role should be created in the management instance.",
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplateStatus": {
      "description": "ClusterRoleTemplateStatus holds the status",
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterSpec": {
      "description": "ClusterSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SecretRef",
          "description": "Holds a reference to a secret that holds the kube config to access this cluster"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "If specified this name is displayed in the UI instead of the metadata name",
          "type": "string"
        },
        "local": {
          "description": "Local specifies if it is the local cluster that should be connected, when this is specified, config is optional",
          "type": "boolean"
        },
        "managementNamespace": {
          "description": "The namespace where the cluster components will be installed in",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterStatus": {
      "description": "ClusterStatus holds the status",
      "properties": {
        "message": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterVirtualClusterDefaults": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "defaultTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplate",
          "description": "DefaultTemplate is the default virtual cluster template"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "latestVersion": {
          "description": "LatestVersion is the latest virtual cluster version",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "values": {
          "description": "Default values for the virtual cluster chart",
          "type": "string"
        },
        "warning": {
          "description": "Warning should be somehow shown to the user when there is a problem retrieving the defaults",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ClusterVirtualClusterDefaults",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Config": {
      "description": "Config holds the loft configuration",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ConfigStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Config",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ConfigList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Config"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ConfigList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ConfigSpec": {
      "description": "ConfigSpec holds the specification",
      "properties": {
        "raw": {
          "description": "Raw holds the raw config",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ConfigStatus": {
      "description": "ConfigStatus holds the status, which is the parsed raw config",
      "properties": {
        "apps": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Apps",
          "description": "Apps holds configuration around apps"
        },
        "audit": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Audit",
          "description": "Audit holds audit configuration"
        },
        "auth": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Authentication",
          "description": "Authentication holds the information for authentication"
        },
        "oidc": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OIDC",
          "description": "OIDC holds oidc provider relevant information"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.CustomerInfo": {
      "properties": {
        "addressLine1": {
          "type": "string"
        },
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "created": {
          "format": "int64",
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        }
      },
      "required": [
        "created"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.DefaultPaymentMethod": {
      "properties": {
        "card": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.DefaultPaymentMethodCard"
        }
      },
      "required": [
        "card"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.DefaultPaymentMethodCard": {
      "properties": {
        "brand": {
          "type": "string"
        },
        "expMonth": {
          "format": "int64",
          "type": "integer"
        },
        "expYear": {
          "format": "int64",
          "type": "integer"
        },
        "funding": {
          "type": "string"
        },
        "last4": {
          "type": "string"
        }
      },
      "required": [
        "last4",
        "expMonth",
        "expYear",
        "brand",
        "funding"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointToken": {
      "description": "DirectClusterEndpointToken holds the object information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointTokenSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointTokenStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DirectClusterEndpointToken",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointTokenSpec": {
      "description": "DirectClusterEndpointTokenSpec holds the object specification",
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointTokenStatus": {
      "description": "DirectClusterEndpointTokenStatus holds the object status",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Event": {
      "description": "Event holds an event",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.EventSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.EventStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.EventList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Event"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "EventList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.EventSpec": {
      "description": "EventSpec holds the specification",
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.EventStatus": {
      "description": "EventStatus holds the status, which is the parsed raw config",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with an audit event that may be set by plugins invoked in the request serving chain, including authentication, authorization and admission plugins. Note that these annotations are for the audit event, and do not correspond to the metadata.annotations of the submitted object. Keys should uniquely identify the informing component to avoid name collisions (e.g. podsecuritypolicy.admission.k8s.io/policy). Values should be short. Annotations are included in the Metadata level.",
          "type": "object"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "auditID": {
          "description": "Unique audit ID, generated for each request.",
          "type": "string"
        },
        "impersonatedUser": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo",
          "description": "Impersonated user information."
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "level": {
          "description": "AuditLevel at which event was generated",
          "type": "string"
        },
        "objectRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.audit.v1.ObjectReference",
          "description": "Object reference this request is targeted at. Does not apply for List-type requests, or non-resource requests."
        },
        "requestObject": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.Unknown",
          "description": "API object from the request, in JSON format. The RequestObject is recorded as-is in the request (possibly re-encoded as JSON), prior to version conversion, defaulting, admission or merging. It is an external versioned object type, and may not be a valid object on its own. Omitted for non-resource requests.  Only logged at Request Level and higher."
        },
        "requestReceivedTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time the request reached the apiserver."
        },
        "requestURI": {
          "description": "RequestURI is the request URI as sent by the client to a server.",
          "type": "string"
        },
        "responseObject": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.Unknown",
          "description": "API object returned in the response, in JSON. The ResponseObject is recorded after conversion to the external type, and serialized as JSON.  Omitted for non-resource requests.  Only logged at Response Level."
        },
        "responseStatus": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status",
          "description": "The response status. For successful and non-successful responses, this will only include the Code and StatusSuccess. For panic type error responses, this will be auto-populated with the error Message."
        },
        "sourceIPs": {
          "description": "Source IPs, from where the request originated and intermediate proxies.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "stage": {
          "description": "Stage of the request handling when this event instance was generated.",
          "type": "string"
        },
        "stageTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time the request reached current audit stage."
        },
        "user": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo",
          "description": "Authenticated user information."
        },
        "userAgent": {
          "description": "UserAgent records the user agent string reported by the client. Note that the UserAgent is provided by the client, and must not be trusted.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the kubernetes verb associated with the request. For non-resource requests, this is the lower-cased HTTP method.",
          "type": "string"
        }
      },
      "required": [
        "level",
        "auditID",
        "stage",
        "requestURI",
        "verb",
        "user"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Feature": {
      "description": "User holds the user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.FeatureSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.FeatureStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.FeatureList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Feature"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "FeatureList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.FeatureSpec": {
      "description": "FeatureSpec holds the specification",
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.FeatureStatus": {
      "description": "FeatureStatus holds the status",
      "properties": {
        "enabled": {
          "description": "Enabled signals if the feature is currently enabled or disabled",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.GroupResources": {
      "description": "GroupResources represents resource kinds in an API group.",
      "properties": {
        "group": {
          "description": "Group is the name of the API group that contains the resources. The empty string represents the core API group.",
          "type": "string"
        },
        "resourceNames": {
          "description": "ResourceNames is a list of resource instance names that the policy matches. Using this field requires Resources to be specified. An empty list implies that every instance of the resource is matched.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' matches pods. 'pods/log' matches the log subresource of pods. '*' matches all resources and their subresources. 'pods/*' matches all subresources of pods. '*/scale' matches all scale subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nAn empty list implies all resources and subresources in this API groups apply.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Kiosk": {
      "description": "Kiosk holds the kiosk types",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.KioskSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.KioskStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Kiosk",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.KioskSpec": {
      "properties": {
        "chartInfo": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ChartInfo"
        },
        "clusterQuota": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.ClusterQuota"
        },
        "configAccount": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.Account",
          "description": "config.kiosk.sh"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.HelmRelease",
          "description": "cluster.loft.sh"
        },
        "jsPolicy": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicy",
          "description": "policy.loft.sh"
        },
        "jsPolicyBundle": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundle"
        },
        "jsPolicyViolations": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolations"
        },
        "localClusterAccess": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.LocalClusterAccess"
        },
        "localClusterRoleTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterRoleTemplate"
        },
        "localSpaceConstraint": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalSpaceConstraint",
          "description": "storage.loft.sh"
        },
        "localStorageClusterAccess": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterAccess"
        },
        "localTeam": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalTeam"
        },
        "localUser": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalUser"
        },
        "sleepModeConfig": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.SleepModeConfig"
        },
        "space": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Space"
        },
        "storageClusterQuota": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterQuota"
        },
        "storageVirtualCluster": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualCluster"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.Template"
        },
        "templateInstance": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.TemplateInstance"
        },
        "virtualCluster": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.VirtualCluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.KioskStatus": {
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.License": {
      "description": "License holds the license information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "License",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseInfo": {
      "properties": {
        "analytics": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Analytics"
        },
        "announcement": {
          "type": "string"
        },
        "baseDomains": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "blockRequests": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResoureRequests"
          },
          "type": "array"
        },
        "currentTime": {
          "format": "int64",
          "type": "integer"
        },
        "customer": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.CustomerInfo"
        },
        "features": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "license": {
          "type": "string"
        },
        "links": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "plan": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Plan"
        },
        "promotions": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Promotions"
        },
        "quantity": {
          "format": "int64",
          "type": "integer"
        },
        "resourceLimits": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResourceLimit"
          },
          "type": "array"
        },
        "subscription": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SubscriptionInfo"
        }
      },
      "required": [
        "currentTime",
        "quantity"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.License"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "LicenseList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseSpec": {
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseStatus": {
      "properties": {
        "info": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseInfo"
        },
        "instance": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseToken": {
      "description": "License Token holds the license token information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseTokenSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseTokenStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "LicenseToken",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseTokenSpec": {
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseTokenStatus": {
      "properties": {
        "token": {
          "description": "Token is the generated token",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgrade": {
      "description": "LoftUpgrade holds the upgrade information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgradeSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgradeStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "LoftUpgrade",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgradeSpec": {
      "properties": {
        "namespace": {
          "description": "If specified, updated the release in the given namespace",
          "type": "string"
        },
        "release": {
          "description": "If specified, uses this as release name",
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgradeStatus": {
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.OIDC": {
      "description": "OIDC holds oidc provider relevant information",
      "properties": {
        "clients": {
          "description": "The clients that are allowed to request loft tokens",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OIDCClient"
          },
          "type": "array"
        },
        "enabled": {
          "description": "If true indicates that loft will act as an OIDC server",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.OIDCClient": {
      "description": "OIDCClient holds information about a client",
      "properties": {
        "clientId": {
          "description": "The client id of the client",
          "type": "string"
        },
        "clientSecret": {
          "description": "The client secret of the client",
          "type": "string"
        },
        "name": {
          "description": "The client name",
          "type": "string"
        },
        "redirectURIs": {
          "description": "A registered set of redirect URIs. When redirecting from dex to the client, the URI requested to redirect to MUST match one of these values, unless the client is \"public\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "redirectURIs"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey": {
      "description": "OwnedAccessKey is an access key that is owned by the current user",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKeySpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKeyStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKeySpec": {
      "properties": {
        "disabled": {
          "description": "If this field is true, the access key is still allowed to exist, however will not work to access the api",
          "type": "boolean"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "identity": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyIdentity",
          "description": "If available, contains information about the sso login data for this access key"
        },
        "identityRefresh": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the identity was refreshed"
        },
        "key": {
          "description": "The actual access key that will be used as a bearer token",
          "type": "string"
        },
        "oidcLogin": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyOIDC",
          "description": "DEPRECATED: Use identity instead If available, contains information about the oidc login data for this access key"
        },
        "oidcProvider": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyOIDCProvider",
          "description": "If the token is a refresh token, contains information about it"
        },
        "parent": {
          "description": "DEPRECATED: do not use anymore Parent is used to share OIDC and external token information with multiple access keys. Since copying an OIDC refresh token would result in the other access keys becoming invalid after a refresh parent allows access keys to share that information.\n\nThe use case for this is primarily user generated access keys, which will have the users current access key as parent if it contains an OIDC token.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyScope",
          "description": "Scope defines the scope of the access key."
        },
        "team": {
          "description": "The team this access key refers to",
          "type": "string"
        },
        "ttl": {
          "description": "The time to life for this access key",
          "format": "int64",
          "type": "integer"
        },
        "ttlAfterLastActivity": {
          "description": "If this is specified, the time to life for this access key will start after the lastActivity instead of creation timestamp",
          "type": "boolean"
        },
        "type": {
          "description": "The type of an access key, which basically describes if the access key is user managed or managed by loft itself.",
          "type": "string"
        },
        "user": {
          "description": "The user this access key refers to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKeyStatus": {
      "properties": {
        "lastActivity": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time this access key was used to access the api"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Plan": {
      "properties": {
        "currency": {
          "type": "string"
        },
        "interval": {
          "type": "string"
        },
        "price": {
          "format": "int64",
          "type": "integer"
        },
        "product": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.PlanProduct"
        }
      },
      "required": [
        "currency",
        "interval",
        "product"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.PlanProduct": {
      "properties": {
        "name": {
          "type": "string"
        },
        "unitLabel": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "unitLabel"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.PolicyViolation": {
      "description": "PolicyViolation",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.PolicyViolationSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.PolicyViolationStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "PolicyViolation",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.PolicyViolationList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.PolicyViolation"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "PolicyViolationList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.PolicyViolationSpec": {
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.PolicyViolationStatus": {
      "properties": {
        "cluster": {
          "description": "Cluster is the cluster where the violation occurred in",
          "type": "string"
        },
        "policy": {
          "description": "Policy is the name of the policy where the violation occurred",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "The Loft user that caused the violation"
        },
        "violation": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation",
          "description": "Violation contains information about the violation"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.PredefinedApp": {
      "description": "PredefinedApp holds information about a predefined app",
      "properties": {
        "chart": {
          "description": "Chart holds the repo/chart name of the predefined app",
          "type": "string"
        },
        "clusters": {
          "description": "Holds the cluster names where to display this app",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "iconUrl": {
          "description": "IconURL specifies an url to the icon that should be displayed for this app. If none is specified the icon from the chart metadata is used.",
          "type": "string"
        },
        "initialValues": {
          "description": "InitialValues holds the initial values for this app. The values will be prefilled automatically. There are certain placeholders that can be used within the values that are replaced by the loft UI automatically.",
          "type": "string"
        },
        "initialVersion": {
          "description": "InitialVersion holds the initial version of this app. This version will be selected automatically.",
          "type": "string"
        },
        "readmeUrl": {
          "description": "ReadmeURL specifies an url to the readme page of this predefined app. If empty an url will be constructed to artifact hub.",
          "type": "string"
        },
        "title": {
          "description": "Title is the name that should be displayed for the predefined app. If empty the chart name is used.",
          "type": "string"
        }
      },
      "required": [
        "chart"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Promotions": {
      "properties": {
        "trial": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TrialPromotion"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKey": {
      "description": "ResetAccessKey is an access key that is owned by another user",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKeySpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKeyStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "ResetAccessKey",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKeySpec": {
      "properties": {
        "disabled": {
          "description": "If this field is true, the access key is still allowed to exist, however will not work to access the api",
          "type": "boolean"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "identity": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyIdentity",
          "description": "If available, contains information about the sso login data for this access key"
        },
        "identityRefresh": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the identity was refreshed"
        },
        "key": {
          "description": "The actual access key that will be used as a bearer token",
          "type": "string"
        },
        "oidcLogin": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyOIDC",
          "description": "DEPRECATED: Use identity instead If available, contains information about the oidc login data for this access key"
        },
        "oidcProvider": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyOIDCProvider",
          "description": "If the token is a refresh token, contains information about it"
        },
        "parent": {
          "description": "DEPRECATED: do not use anymore Parent is used to share OIDC and external token information with multiple access keys. Since copying an OIDC refresh token would result in the other access keys becoming invalid after a refresh parent allows access keys to share that information.\n\nThe use case for this is primarily user generated access keys, which will have the users current access key as parent if it contains an OIDC token.",
          "type": "string"
        },
        "scope": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyScope",
          "description": "Scope defines the scope of the access key."
        },
        "team": {
          "description": "The team this access key refers to",
          "type": "string"
        },
        "ttl": {
          "description": "The time to life for this access key",
          "format": "int64",
          "type": "integer"
        },
        "ttlAfterLastActivity": {
          "description": "If this is specified, the time to life for this access key will start after the lastActivity instead of creation timestamp",
          "type": "boolean"
        },
        "type": {
          "description": "The type of an access key, which basically describes if the access key is user managed or managed by loft itself.",
          "type": "string"
        },
        "user": {
          "description": "The user this access key refers to",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKeyStatus": {
      "properties": {
        "lastActivity": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time this access key was used to access the api"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ResourceLimit": {
      "properties": {
        "acrossAllClusters": {
          "type": "boolean"
        },
        "blockRequests": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResoureRequests"
          },
          "type": "array"
        },
        "group": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "limit": {
          "format": "int64",
          "type": "integer"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.ResoureRequests": {
      "properties": {
        "group": {
          "type": "string"
        },
        "management": {
          "type": "boolean"
        },
        "resource": {
          "type": "string"
        },
        "verbs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Self": {
      "description": "Self holds information about the currently logged in user",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Self",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSpec": {
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfStatus": {
      "properties": {
        "accessKey": {
          "description": "The name of the currently used access key",
          "type": "string"
        },
        "accessKeyType": {
          "description": "The type of the currently used access key",
          "type": "string"
        },
        "groups": {
          "description": "The groups of the currently logged in user",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subject": {
          "description": "The subject of the currently logged in user",
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo",
          "description": "The name of the currently logged in team"
        },
        "user": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserInfo",
          "description": "The name of the currently logged in user"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReview": {
      "description": "User holds the user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReviewSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReviewStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReviewSpec": {
      "properties": {
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes",
          "description": "NonResourceAttributes describes information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes",
          "description": "ResourceAuthorizationAttributes describes information for a resource access request"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReviewStatus": {
      "properties": {
        "allowed": {
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "required": [
        "allowed"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret": {
      "description": "SharedSecret holds the secret information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecretSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecretStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecretList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SharedSecretList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecretSpec": {
      "description": "SharedSecretSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams which will be transformed to Roles and RoleBindings",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object"
        },
        "description": {
          "description": "Description describes a shared secret",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecretStatus": {
      "description": "SharedSecretStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint": {
      "description": "SpaceConstraint holds the globalSpaceConstraint information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraintSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraintStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraintList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceConstraintList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraintSpec": {
      "description": "SpaceConstraintSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters are the clusters this template should be applied on.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a space constraint object",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "localSpaceConstraintTemplate": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.LocalSpaceConstraintTemplate",
          "description": "LocalSpaceConstraintTemplate holds the space constraint template"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraintStatus": {
      "description": "SpaceConstraintStatus holds the status",
      "properties": {
        "clusterRole": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
        },
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate": {
      "description": "SpaceTemplate holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplateStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplateList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SpaceTemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplateSpec": {
      "description": "SpaceTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes the space template",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that is shown in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceTemplateDefinition",
          "description": "Template holds the space template"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplateStatus": {
      "description": "SpaceTemplateStatus holds the status",
      "properties": {
        "apps": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReview": {
      "description": "User holds the user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReviewSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReviewStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReviewSpec": {
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.",
          "type": "object"
        },
        "groups": {
          "description": "Groups is the groups you're testing for.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes",
          "description": "NonResourceAttributes describes information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes",
          "description": "ResourceAuthorizationAttributes describes information for a resource access request"
        },
        "uid": {
          "description": "UID information about the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReviewStatus": {
      "properties": {
        "allowed": {
          "description": "Allowed is required. True if the action would be allowed, false otherwise.",
          "type": "boolean"
        },
        "denied": {
          "description": "Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "Reason is optional.  It indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "required": [
        "allowed"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.SubscriptionInfo": {
      "properties": {
        "created": {
          "format": "int64",
          "type": "integer"
        },
        "currentPeriodEnd": {
          "format": "int64",
          "type": "integer"
        },
        "defaultPaymentMethod": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.DefaultPaymentMethod"
        },
        "nextInvoice": {
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "trialEnd": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "trialEnd",
        "status",
        "currentPeriodEnd",
        "nextInvoice",
        "created"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Task": {
      "description": "Task holds the Task information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TaskSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TaskStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TaskList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TaskList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TaskLog": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TaskLog",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TaskSpec": {
      "description": "TaskSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "displayName": {
          "description": "DisplayName is the name that should be displayed in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "scope": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyScope",
          "description": "Scope defines the scope of the access key."
        },
        "target": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Target",
          "description": "Target where this task should get executed"
        },
        "task": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.TaskDefinition",
          "description": "Task defines the task to execute"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TaskStatus": {
      "description": "TaskStatus holds the status",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
        },
        "conditions": {
          "description": "Conditions holds several conditions the virtual cluster might be in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.Condition"
          },
          "type": "array"
        },
        "containerState": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus",
          "description": "ContainerState describes the container state of the task"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the latest generation observed by the controller.",
          "format": "int64",
          "type": "integer"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.UserOrTeam"
        },
        "podPhase": {
          "description": "PodPhase describes the phase this task is in",
          "type": "string"
        },
        "started": {
          "description": "Started determines if the task was started",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.Team": {
      "description": "Team holds the team information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamAccessKeys": {
      "properties": {
        "accessKeys": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TeamAccessKeys",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamClusters": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccounts"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TeamClusters",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "TeamList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamSpec": {
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "clusterAccountTemplates": {
          "description": "ClusterAccountTemplates that should be applied for the user",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "clusterRoles": {
          "description": "ClusterRoles define the cluster roles that the users should have assigned in the cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterRoleRef"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "groups": {
          "description": "The groups defined in a token that belong to a team",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets holds secret references to image pull secrets the team has access to.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.KindSecretRef"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "username": {
          "description": "The username of the team that will be used for identification and docker registry namespace",
          "type": "string"
        },
        "users": {
          "description": "The loft users that belong to a team",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamStatus": {
      "properties": {
        "clusterAccountTemplates": {
          "description": "ClusterAccountTemplates holds information about which cluster account templates were applied DEPRECATED: Use status.clusters instead",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplateStatus"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters holds information about which clusters the user has accounts in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccountClusterStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.TrialPromotion": {
      "properties": {
        "description": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "product": {
          "type": "string"
        }
      },
      "required": [
        "product",
        "description",
        "link"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.User": {
      "description": "User holds the user information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.UserAccessKeys": {
      "properties": {
        "accessKeys": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserAccessKeys",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.UserClusters": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "clusters": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccounts"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserClusters",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.UserInfo": {
      "properties": {
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "The users email address",
          "type": "string"
        },
        "name": {
          "description": "Name is the kubernetes name of the object",
          "type": "string"
        },
        "subject": {
          "description": "The user subject",
          "type": "string"
        },
        "teams": {
          "description": "Teams are the teams the user is part of",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        },
        "username": {
          "description": "The username that is used to login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.UserList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.UserProfile": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "custom": {
          "description": "Custom is custom information that should be saved of the user",
          "type": "string"
        },
        "displayName": {
          "description": "The new display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "Email is the new email of the user",
          "type": "string"
        },
        "icon": {
          "description": "Icon is the new icon of the user",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "password": {
          "description": "Password is the new password of the user",
          "type": "string"
        },
        "username": {
          "description": "Username is the new username of the user",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "UserProfile",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.UserSpec": {
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "accessKeysRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SecretRef",
          "description": "Deprecated: Use the Access Key CRD instead A reference to the users access keys"
        },
        "clusterAccountTemplates": {
          "description": "ClusterAccountTemplates that should be applied for the user",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate"
          },
          "type": "array"
        },
        "clusterRoles": {
          "description": "ClusterRoles define the cluster roles that the users should have assigned in the cluster.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.ClusterRoleRef"
          },
          "type": "array"
        },
        "codesRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SecretRef",
          "description": "A reference to the users access keys"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "disabled": {
          "description": "If disabled is true, an user will not be able to login anymore. All other user resources are unaffected and other users can still interact with this user",
          "type": "boolean"
        },
        "displayName": {
          "description": "The display name shown in the UI",
          "type": "string"
        },
        "email": {
          "description": "The users email address",
          "type": "string"
        },
        "groups": {
          "description": "The groups the user has access to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "icon": {
          "description": "The URL to an icon that should be shown for the user",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets holds secret references to image pull secrets the user has access to.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.KindSecretRef"
          },
          "type": "array"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "passwordRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SecretRef",
          "description": "A reference to the user password"
        },
        "subject": {
          "description": "The user subject as presented by the token",
          "type": "string"
        },
        "tokenGeneration": {
          "description": "TokenGeneration can be used to invalidate all user tokens",
          "format": "int64",
          "type": "integer"
        },
        "username": {
          "description": "The username that is used to login",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.UserStatus": {
      "description": "UserStatus holds the status of an user",
      "properties": {
        "clusterAccountTemplates": {
          "description": "ClusterAccountTemplates holds information about which cluster account templates were applied DEPRECATED: Use status.clusters instead",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplateStatus"
          },
          "type": "array"
        },
        "clusters": {
          "description": "Clusters holds information about which clusters the user has accounts in",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccountClusterStatus"
          },
          "type": "array"
        },
        "teams": {
          "description": "Teams the user is currently part of",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate": {
      "description": "VirtualClusterTemplate holds the information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplateStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplateList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplateList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplateSpec": {
      "description": "VirtualClusterTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes the virtual cluster template",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that is shown in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "spaceTemplateRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef",
          "description": "SpaceTemplate to use to create the virtual cluster space if it does not exist"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateDefinition",
          "description": "Template holds the virtual cluster template"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplateStatus": {
      "description": "VirtualClusterTemplateStatus holds the status",
      "properties": {
        "apps": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.EntityInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access": {
      "description": "Access describes the access to a secret",
      "properties": {
        "subresources": {
          "description": "Subresources defines the sub resources that are allowed by this access rule",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "teams": {
          "description": "Teams specifies which teams should be able to access this secret with the aforementioned verbs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "users": {
          "description": "Users specifies which users should be able to access this secret with the aforementioned verbs",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyIdentity": {
      "properties": {
        "ConnectorData": {
          "description": "ConnectorData holds data used by the connector for subsequent requests after initial authentication, such as access tokens for upstream providers.\n\nThis data is never shared with end users, OAuth clients, or through the API.",
          "format": "byte",
          "type": "string"
        },
        "Email": {
          "description": "The user email",
          "type": "string"
        },
        "EmailVerified": {
          "description": "If the user email was verified",
          "type": "boolean"
        },
        "Groups": {
          "description": "The groups from the identity provider",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "preferredUsername": {
          "description": "The preferred username / display name",
          "type": "string"
        },
        "userId": {
          "description": "The subject of the user",
          "type": "string"
        },
        "username": {
          "description": "The username",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyOIDC": {
      "properties": {
        "accessToken": {
          "description": "The current access token that was created during login",
          "format": "byte",
          "type": "string"
        },
        "idToken": {
          "description": "The current id token that was created during login",
          "format": "byte",
          "type": "string"
        },
        "lastRefresh": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the id token was refreshed"
        },
        "refreshToken": {
          "description": "The current refresh token that was created during login",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyOIDCProvider": {
      "properties": {
        "clientId": {
          "description": "ClientId the token was generated for",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce to use",
          "type": "string"
        },
        "redirectUri": {
          "description": "RedirectUri to use",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes to use",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyScope": {
      "properties": {
        "rules": {
          "description": "Rules specifies the rules that should apply to the access key.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyScopeRule"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyScopeRule": {
      "description": "AccessKeyScopeRule describes a rule for the access key",
      "properties": {
        "cluster": {
          "description": "Cluster that this rule matches. Only applies to cluster requests. If this is set, no requests for non cluster requests are allowed. An empty cluster means no restrictions will apply.",
          "type": "string"
        },
        "namespaces": {
          "description": "Namespaces that this rule matches. The empty string \"\" matches non-namespaced resources. An empty list implies every namespace.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of URL paths that should be checked. *s are allowed, but only as the full, final step in the path. Examples:\n \"/metrics\" - Log requests for apiserver metrics\n \"/healthz*\" - Log all health checks",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requestTargets": {
          "description": "RequestTargets is a list of request targets that are allowed. An empty list implies every request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources that this rule matches. An empty list implies all kinds in all API groups.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.GroupResources"
          },
          "type": "array"
        },
        "verbs": {
          "description": "The verbs that match this rule. An empty list implies every verb.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "virtualClusters": {
          "description": "VirtualClusters that this rule matches. Only applies to virtual cluster requests. An empty list means no restrictions will apply.",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyVirtualCluster"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccessKeyVirtualCluster": {
      "properties": {
        "name": {
          "description": "Name of the virtual cluster. Empty means all virtual clusters.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the virtual cluster. Empty means all namespaces.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccountClusterStatus": {
      "description": "AccountClusterStatus holds the status of an account in a cluster",
      "properties": {
        "accounts": {
          "description": "Accounts is the account name of the user in the cluster",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "accountsClusterTemplateStatus": {
          "description": "AccountsClusterTemplate status is the status of the account cluster template that was used to create the cluster account",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccountClusterTemplateStatus"
          },
          "type": "array"
        },
        "cluster": {
          "description": "Cluster is the cluster name of the user in the cluster",
          "type": "string"
        },
        "message": {
          "description": "Message describes why loft couldn't sync the account in human language",
          "type": "string"
        },
        "phase": {
          "description": "Status holds the status of the account in the target cluster",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes why loft couldn't sync the account with a machine readable identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccountClusterTemplateStatus": {
      "properties": {
        "account": {
          "description": "Account is the name of the account in the cluster",
          "type": "string"
        },
        "accountTemplateHash": {
          "description": "AccountTemplateHash is the hash of the account template that was applied",
          "type": "string"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Message describes why loft couldn't sync the account in human language",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the cluster account template",
          "type": "string"
        },
        "ownsHash": {
          "description": "OwnsHash is the hash of the owns part of the cluster account template that was applied",
          "type": "string"
        },
        "phase": {
          "description": "Status holds the status of the account in the target cluster",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes why loft couldn't sync the account with a machine readable identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AccountTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.kiosk.config.v1alpha1.AccountSpec",
          "description": "Spec holds the account template spec"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.AppParameter": {
      "properties": {
        "defaultValue": {
          "description": "DefaultValue is the default value if none is specified",
          "type": "string"
        },
        "description": {
          "description": "Description is the description to show for this parameter",
          "type": "string"
        },
        "invalidation": {
          "description": "Invalidation regex that if matched will reject the input",
          "type": "string"
        },
        "label": {
          "description": "Label is the label to show for this parameter",
          "type": "string"
        },
        "max": {
          "description": "Max is the maximum number if type is number",
          "format": "int32",
          "type": "integer"
        },
        "min": {
          "description": "Min is the minimum number if type is number",
          "format": "int32",
          "type": "integer"
        },
        "options": {
          "description": "Options are the options if type is enum",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "placeholder": {
          "description": "Placeholder shown in the UI",
          "type": "string"
        },
        "required": {
          "description": "Required specifies if this parameter is required",
          "type": "boolean"
        },
        "section": {
          "description": "Section where this app should be displayed. Apps with the same section name will be grouped together",
          "type": "string"
        },
        "type": {
          "description": "Type of the parameter. Can be one of: string, multiline, boolean, enum and password",
          "type": "string"
        },
        "validation": {
          "description": "Validation regex that if matched will allow the input",
          "type": "string"
        },
        "variable": {
          "description": "Variable is the path of the variable. Can be foo or foo.bar for nested objects.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.ApplyTask": {
      "properties": {
        "args": {
          "description": "Args are extra arguments used to apply the manifests",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "manifests": {
          "description": "Manifests are the manifests to apply",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.Cluster": {
      "description": "Cluster holds the cluster information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.ClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.ClusterStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.ClusterAccountTemplateClusterStatus": {
      "properties": {
        "message": {
          "description": "Message describes why loft couldn't sync the account in human language",
          "type": "string"
        },
        "name": {
          "description": "Name of the cluster where the cluster account template was applied",
          "type": "string"
        },
        "phase": {
          "description": "Status holds the status of the account in the target cluster",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes why loft couldn't sync the account with a machine readable identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.ClusterSpec": {
      "description": "ClusterSpec holds the cluster specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SecretRef",
          "description": "Holds a reference to a secret that holds the kube config to access this cluster"
        },
        "description": {
          "description": "Description describes a cluster access object",
          "type": "string"
        },
        "displayName": {
          "description": "If specified this name is displayed in the UI instead of the metadata name",
          "type": "string"
        },
        "local": {
          "description": "Local specifies if it is the local cluster that should be connected, when this is specified, config is optional",
          "type": "boolean"
        },
        "managementNamespace": {
          "description": "The namespace where the cluster components will be installed in",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.ClusterStatus": {
      "description": "ClusterStatus holds the user status",
      "properties": {
        "message": {
          "type": "string"
        },
        "phase": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.GroupResources": {
      "description": "GroupResources represents resource kinds in an API group.",
      "properties": {
        "group": {
          "description": "Group is the name of the API group that contains the resources. The empty string represents the core API group.",
          "type": "string"
        },
        "resourceNames": {
          "description": "ResourceNames is a list of resource instance names that the policy matches. Using this field requires Resources to be specified. An empty list implies that every instance of the resource is matched.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' matches pods. 'pods/log' matches the log subresource of pods. '*' matches all resources and their subresources. 'pods/*' matches all subresources of pods. '*/scale' matches all scale subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nAn empty list implies all resources and subresources in this API groups apply.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmChart": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "repository": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmChartRepository",
          "description": "Repository is the repository name of this chart"
        },
        "versions": {
          "description": "Versions holds all chart versions",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmChartRepository": {
      "properties": {
        "insecure": {
          "description": "Insecure specifies if the chart should be retrieved without TLS verification",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the name of the repository",
          "type": "string"
        },
        "password": {
          "description": "Password of the repository",
          "type": "string"
        },
        "url": {
          "description": "URL is the repository url",
          "type": "string"
        },
        "username": {
          "description": "Username of the repository",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmConfiguration": {
      "description": "HelmConfiguration holds the helm configuration",
      "properties": {
        "insecure": {
          "description": "Determines if the remote location uses an insecure TLS certificate.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the chart to deploy",
          "type": "string"
        },
        "password": {
          "description": "The password to use for the selected repository",
          "type": "string"
        },
        "repoUrl": {
          "description": "The repo url to use",
          "type": "string"
        },
        "username": {
          "description": "The username to use for the selected repository",
          "type": "string"
        },
        "values": {
          "description": "The additional helm values to use. Expected block string",
          "type": "string"
        },
        "version": {
          "description": "Version is the version of the chart to deploy",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmTask": {
      "properties": {
        "args": {
          "description": "Args are extra args to pass to helm",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "release": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmTaskRelease",
          "description": "Release holds the release information"
        },
        "rollbackRevision": {
          "description": "RollbackRevision is the revision to rollback to",
          "type": "string"
        },
        "streamContainer": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.StreamContainer",
          "description": "StreamContainer can be used to stream a containers logs instead of the helm output."
        },
        "type": {
          "description": "Type is the task type. Defaults to Upgrade",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmTaskRelease": {
      "properties": {
        "config": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.HelmReleaseSpec",
          "description": "Config is the helm config to use to deploy the release"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels are additional labels for the helm release.",
          "type": "object"
        },
        "name": {
          "description": "Name is the name of the release",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the release, if empty will use the target namespace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.KindSecretRef": {
      "description": "KindSecretRef is the reference to a secret containing the user password",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the api group of the secret",
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "kind": {
          "description": "Kind is the kind of the secret",
          "type": "string"
        },
        "secretName": {
          "type": "string"
        },
        "secretNamespace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.LocalClusterAccessTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Metadata is the metadata of the cluster access object"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterAccessSpec",
          "description": "LocalClusterAccessSpec holds the spec of the cluster access in the cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.LocalClusterRoleTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Metadata is the metadata of the cluster role template object"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalClusterRoleTemplateSpec",
          "description": "LocalClusterRoleTemplateSpec holds the spec of the cluster role template in the cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.LocalSpaceConstraintTemplate": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Metadata is the metadata of the space constraint object"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.LocalSpaceConstraintSpec",
          "description": "LocalSpaceConstraintSpec holds the spec of the space constraint in the cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.SecretRef": {
      "description": "SecretRef is the reference to a secret containing the user password",
      "properties": {
        "key": {
          "type": "string"
        },
        "secretName": {
          "type": "string"
        },
        "secretNamespace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceAppReference": {
      "properties": {
        "name": {
          "description": "Name of the target app",
          "type": "string"
        },
        "releaseName": {
          "description": "ReleaseName of the target app",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceCreationAppReference": {
      "properties": {
        "name": {
          "description": "Name of the target app",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters are additional helm values that are merged with the original helm values.",
          "type": "string"
        },
        "releaseName": {
          "description": "ReleaseName of the target app",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceCreationTask": {
      "properties": {
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceCreationAppReference"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "Metadata of the space"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner defines the space owner"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceTemplateDefinition": {
      "properties": {
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceAppReference"
          },
          "type": "array"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "The space metadata"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.StreamContainer": {
      "properties": {
        "container": {
          "description": "Container is the container name to use",
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector for pods. The newest matching pod will be used to stream logs from"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.Target": {
      "properties": {
        "cluster": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.TargetCluster",
          "description": "Cluster defines a connected cluster as target"
        },
        "virtualCluster": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.TargetVirtualCluster",
          "description": "VirtualCluster defines a virtual cluster as target"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.TargetCluster": {
      "properties": {
        "cluster": {
          "description": "Cluster is the cluster where the task should get executed",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace where the task should get executed",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.TargetVirtualCluster": {
      "properties": {
        "cluster": {
          "description": "Cluster is the cluster where the virtual cluster lies",
          "type": "string"
        },
        "name": {
          "description": "Name of the virtual cluster",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace where the virtual cluster is located",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.TaskDefinition": {
      "properties": {
        "apply": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.ApplyTask",
          "description": "ApplyTask executes a kubectl apply"
        },
        "helm": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.HelmTask",
          "description": "HelmTask executes a helm command"
        },
        "spaceCreation": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceCreationTask",
          "description": "SpaceCreationTask creates a new space"
        },
        "virtualClusterCreation": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterCreationTask",
          "description": "VirtualClusterCreatioTask creates a new virtual cluster"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplate": {
      "properties": {
        "accountName": {
          "description": "AccountName is the name of the account that should be created. Defaults to the user or team kubernetes name.",
          "type": "string"
        },
        "name": {
          "description": "Name of the cluster account template to apply",
          "type": "string"
        },
        "sync": {
          "description": "Sync defines if Loft should sync changes to the cluster account template to the cluster accounts and create new accounts if new clusters match the templates.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserClusterAccountTemplateStatus": {
      "properties": {
        "clusters": {
          "description": "Clusters holds the cluster on which this template was applied",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.ClusterAccountTemplateClusterStatus"
          },
          "type": "array"
        },
        "message": {
          "description": "Message describes why loft couldn't sync the account in human language",
          "type": "string"
        },
        "name": {
          "description": "Name of the cluster account template that was applied",
          "type": "string"
        },
        "phase": {
          "description": "Status holds the status of the account in the target cluster",
          "type": "string"
        },
        "reason": {
          "description": "Reason describes why loft couldn't sync the account with a machine readable identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam": {
      "properties": {
        "team": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterAppReference": {
      "properties": {
        "name": {
          "description": "Name of the target app",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace specifies in which target namespace the app should get deployed in",
          "type": "string"
        },
        "releaseName": {
          "description": "ReleaseName is the name of the app release",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterCreationAppReference": {
      "properties": {
        "name": {
          "description": "Name of the target app",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace specifies in which target namespace the app should get deployed in",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters are additional helm chart values that will get merged with config and are then used to deploy the helm chart.",
          "type": "string"
        },
        "releaseName": {
          "description": "ReleaseName is the name of the app release",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterCreationTask": {
      "properties": {
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterCreationAppReference"
          },
          "type": "array"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "The helm release configuration for the virtual cluster."
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "The virtual cluster metadata"
        },
        "spaceCreation": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.SpaceCreationTask",
          "description": "SpaceCreationTask creates a new space if defined for the virtual cluster"
        },
        "wait": {
          "description": "Wait defines if the task should wait until the virtual cluster is ready",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplate": {
      "description": "VirtualClusterTemplate holds the virtualClusterTemplate information",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateDefinition": {
      "properties": {
        "apps": {
          "description": "Apps specifies the apps that should get deployed by this template",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterAppReference"
          },
          "type": "array"
        },
        "helmRelease": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.storage.v1.VirtualClusterHelmRelease",
          "description": "The helm release configuration for the virtual cluster."
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "The virtual cluster metadata"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef": {
      "properties": {
        "name": {
          "description": "Name of the space template",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateSpec": {
      "description": "VirtualClusterTemplateSpec holds the specification",
      "properties": {
        "access": {
          "description": "Access holds the access rights for users and teams",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.Access"
          },
          "type": "array"
        },
        "description": {
          "description": "Description describes the virtual cluster template",
          "type": "string"
        },
        "displayName": {
          "description": "DisplayName is the name that is shown in the UI",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.UserOrTeam",
          "description": "Owner holds the owner of this object"
        },
        "spaceTemplateRef": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateSpaceTemplateRef",
          "description": "SpaceTemplate to use to create the virtual cluster space if it does not exist"
        },
        "template": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateDefinition",
          "description": "Template holds the virtual cluster template"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.storage.v1.VirtualClusterTemplateStatus": {
      "description": "VirtualClusterTemplateStatus holds the status",
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmRelease": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmReleaseSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmReleaseStatus"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmRelease",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmReleaseList": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmRelease"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmReleaseList",
          "version": "v1"
        }
      ]
    },
    "com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmReleaseSpec": {
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations are extra annotations for this helm release",
          "type": "object"
        },
        "chart": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Chart",
          "description": "Chart holds information about a chart that should get deployed"
        },
        "manifests": {
          "description": "Manifests holds kube manifests that will be deployed as a chart",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters are additional helm chart values that will get merged with config and are then used to deploy the helm chart.",
          "type": "string"
        },
        "values": {
          "description": "Values is the set of extra Values added to the chart. These values merge with the default values inside of the chart. You can use golang templating in here with values from parameters.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmReleaseStatus": {
      "properties": {
        "info": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Info",
          "description": "Info provides information about a release"
        },
        "metadata": {
          "$ref": "#/definitions/com.github.loft-sh.agentapi.v2.pkg.apis.loft.cluster.v1.Metadata",
          "description": "Metadata provides information about a chart"
        },
        "version": {
          "description": "Revision is an int which represents the revision of the release.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicy": {
      "description": "JsPolicy holds the webhook configuration",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicySpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundle": {
      "description": "JsPolicyBundle holds the bundled payload",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleSpec": {
      "properties": {
        "bundle": {
          "description": "Bundle holds the bundled payload (including dependencies and minified javascript code)",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyBundleStatus": {
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicySpec": {
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "apiVersions": {
          "description": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "auditLogSize": {
          "description": "AuditLogSize defines how many violations should be logged in the status. Defaults to 10",
          "format": "int32",
          "type": "integer"
        },
        "auditPolicy": {
          "description": "AuditPolicy defines if violations should be logged to the webhook status or not. By default, violations will be logged to the CRD status.",
          "type": "string"
        },
        "dependencies": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Dependencies is a map of npm modules this webhook should be bundled with",
          "type": "object"
        },
        "failurePolicy": {
          "description": "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.",
          "type": "string"
        },
        "javascript": {
          "description": "JavaScript is the payload of the webhook that will be executed. If this is not defined, jsPolicy expects the user to create a JsPolicyBundle for this policy.",
          "type": "string"
        },
        "matchPolicy": {
          "description": "matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.\n\nDefaults to \"Equivalent\"",
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.\n\nFor example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\";  you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"runlevel\",\n      \"operator\": \"NotIn\",\n      \"values\": [\n        \"0\",\n        \"1\"\n      ]\n    }\n  ]\n}\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": {\n  \"matchExpressions\": [\n    {\n      \"key\": \"environment\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"prod\",\n        \"staging\"\n      ]\n    }\n  ]\n}\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything."
        },
        "operations": {
          "description": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scope": {
          "description": "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
          "type": "string"
        },
        "timeoutSeconds": {
          "description": "TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "Type defines what kind of policy the object represents. Valid values are Validating, Mutating and Controller. Defaults to Validating.",
          "type": "string"
        },
        "violationPolicy": {
          "description": "Violation policy describes how violations should be handled. You can either specify deny (which is the default), warn or dry.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyStatus": {
      "properties": {
        "bundleHash": {
          "description": "BundleHash is used to determine if we have to re-bundle the javascript",
          "type": "string"
        },
        "message": {
          "description": "Message describes the error in human readable language if the webhook is in a failed state",
          "type": "string"
        },
        "phase": {
          "description": "Phase describes how the syncing status of the webhook is",
          "type": "string"
        },
        "reason": {
          "description": "Reason holds the error in machine readable language if the webhook is in a failed state",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolations": {
      "description": "JsPolicyViolations holds the webhook configuration",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsSpec"
        },
        "status": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsStatus"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsSpec": {
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.JsPolicyViolationsStatus": {
      "properties": {
        "violations": {
          "description": "Violations is an array of violations that were recorded by the webhook",
          "items": {
            "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.PolicyViolation": {
      "properties": {
        "action": {
          "description": "Action holds the the action type the webhook reacted with",
          "type": "string"
        },
        "code": {
          "description": "Code is the error code that was returned to the client",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "Message holds the message that was sent to the client",
          "type": "string"
        },
        "reason": {
          "description": "Reason is the error reason that was returned to the client",
          "type": "string"
        },
        "requestInfo": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.RequestInfo",
          "description": "The request this violation is about"
        },
        "timestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The timestamp when this violation has occurred"
        },
        "userInfo": {
          "$ref": "#/definitions/com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.UserInfo",
          "description": "The user that sent the request"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.RequestInfo": {
      "properties": {
        "apiVersion": {
          "description": "Kind is the type of object being submitted (for example, Pod or Deployment)",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of object being submitted (for example, Pod or Deployment)",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the object as presented in the request. On a CREATE operation, the client may omit name and rely on the server to generate the name. If that is the case, this field will contain an empty string.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace associated with the request (if any).",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the operation being performed. This may be different than the operation requested. e.g. a patch can result in either a CREATE or UPDATE Operation.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.github.loft-sh.jspolicy.pkg.apis.policy.v1beta1.UserInfo": {
      "properties": {
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.UserInfo": {
      "description": "UserInfo holds the information about the user needed to implement the user.Info interface.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Any additional information provided by the authenticator.",
          "type": "object"
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.NonResourceAttributes": {
      "description": "NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface",
      "properties": {
        "path": {
          "description": "Path is the URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "Verb is the standard HTTP verb",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.ResourceAttributes": {
      "description": "ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface",
      "properties": {
        "group": {
          "description": "Group is the API Group of the Resource.  \"*\" means all.",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
          "type": "string"
        },
        "resource": {
          "description": "Resource is one of the existing resource types.  \"*\" means all.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is one of the existing resource types.  \"\" means none.",
          "type": "string"
        },
        "verb": {
          "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.",
          "type": "string"
        },
        "version": {
          "description": "Version is the API Version of the Resource.  \"*\" means all.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "properties": {
        "running": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning",
          "description": "Details about a running container"
        },
        "terminated": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated",
          "description": "Details about a terminated container"
        },
        "waiting": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting",
          "description": "Details about a waiting container"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "description": "ContainerStateRunning is a running state of a container.",
      "properties": {
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the container was last (re-)started"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "description": "ContainerStateTerminated is a terminated state of a container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://<container_id>'",
          "type": "string"
        },
        "exitCode": {
          "description": "Exit status from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "finishedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the container last terminated"
        },
        "message": {
          "description": "Message regarding the last termination of the container",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason from the last termination of the container",
          "type": "string"
        },
        "signal": {
          "description": "Signal from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which previous execution of the container started"
        }
      },
      "required": [
        "exitCode"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "properties": {
        "message": {
          "description": "Message regarding why the container is not yet running.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason the container is not yet running.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStatus": {
      "description": "ContainerStatus contains details for the current status of this container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format 'docker://<container_id>'.",
          "type": "string"
        },
        "image": {
          "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imageID": {
          "description": "ImageID of the container's image.",
          "type": "string"
        },
        "lastState": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "Details about the container's last termination condition."
        },
        "name": {
          "description": "This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.",
          "type": "string"
        },
        "ready": {
          "description": "Specifies whether the container has passed its readiness probe.",
          "type": "boolean"
        },
        "restartCount": {
          "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
          "format": "int32",
          "type": "integer"
        },
        "started": {
          "description": "Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.",
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "Details about the container's current condition."
        }
      },
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuotaSpec": {
      "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object"
        },
        "scopeSelector": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScopeSelector",
          "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched."
        },
        "scopes": {
          "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuotaStatus": {
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object"
        },
        "used": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Used is the current observed total usage of the resource in the namespace.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScopeSelector": {
      "description": "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.",
      "properties": {
        "matchExpressions": {
          "description": "A list of scope selector requirements by scope of the resources.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
      "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
      "properties": {
        "operator": {
          "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
          "type": "string"
        },
        "scopeName": {
          "description": "The name of the scope that the selector applies to.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "scopeName",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.AggregationRule": {
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.Subject": {
      "description": "Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.",
          "type": "string"
        },
        "name": {
          "description": "Name of the object being referenced.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \"1500m\"\n  1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "description": "APIGroup contains the name, the supported versions, and the preferred version of a group.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "name is the name of the group.",
          "type": "string"
        },
        "preferredVersion": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery",
          "description": "preferredVersion is the version preferred by the API server, which probably is the storage version."
        },
        "serverAddressByClientCIDRs": {
          "description": "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          },
          "type": "array"
        },
        "versions": {
          "description": "versions are the versions supported in this group.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "versions"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroup",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        }
      },
      "required": [
        "groups"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroupList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "APIResource specifies the name of a resource and whether it is namespaced.",
      "properties": {
        "categories": {
          "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
          "type": "string"
        },
        "kind": {
          "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
          "type": "string"
        },
        "name": {
          "description": "name is the plural name of the resource.",
          "type": "string"
        },
        "namespaced": {
          "description": "namespaced indicates if a resource is namespaced or not.",
          "type": "boolean"
        },
        "shortNames": {
          "description": "shortNames is a list of suggested short names of the resource.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "singularName": {
          "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
          "type": "string"
        },
        "storageVersionHash": {
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
          "type": "string"
        },
        "verbs": {
          "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
          "type": "string"
        }
      },
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "groupVersion": {
          "description": "groupVersion is the group and version this APIResourceList is for.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "resources": {
          "description": "resources contains the name of the resources and if they are namespaced.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          },
          "type": "array"
        }
      },
      "required": [
        "groupVersion",
        "resources"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIResourceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "format": "int64",
          "type": "integer"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "orphanDependents": {
          "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
          "type": "boolean"
        },
        "preconditions": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions",
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned."
        },
        "propagationPolicy": {
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "management.loft.sh",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "virtualcluster.loft.sh",
          "kind": "DeleteOptions",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
      "properties": {
        "groupVersion": {
          "description": "groupVersion specifies the API group and version in the form \"group/version\"",
          "type": "string"
        },
        "version": {
          "description": "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
          "type": "string"
        }
      },
      "required": [
        "groupVersion",
        "version"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "format": "int64",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1",
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
      "description": "MicroTime is version of Time with microsecond level precision.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
      "properties": {
        "resourceVersion": {
          "description": "Specifies the target ResourceVersion",
          "type": "string"
        },
        "uid": {
          "description": "Specifies the target UID.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
      "properties": {
        "clientCIDR": {
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "type": "string"
        },
        "serverAddress": {
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
          "type": "string"
        }
      },
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
      "description": "Status is a return value for calls that don't return other objects.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "code": {
          "description": "Suggested HTTP return code for this status, 0 if not set.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails",
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type."
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
          "type": "string"
        },
        "status": {
          "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Status",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "properties": {
        "causes": {
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
          },
          "type": "array"
        },
        "group": {
          "description": "The group attribute of the resource associated with the status StatusReason.",
          "type": "string"
        },
        "kind": {
          "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "format": "int32",
          "type": "integer"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.runtime.Unknown": {
      "description": "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation.",
      "properties": {
        "ContentEncoding": {
          "description": "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
          "type": "string"
        },
        "ContentType": {
          "description": "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
          "type": "string"
        },
        "Raw": {
          "description": "Raw will hold the complete serialized object which couldn't be matched with a registered type. Most likely, nothing should be done with this except for passing it through the system.",
          "format": "byte",
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        }
      },
      "required": [
        "Raw",
        "ContentEncoding",
        "ContentType"
      ],
      "type": "object"
    }
  },
  "info": {
    "title": "Api",
    "version": "unversioned"
  },
  "paths": {
    "/apis/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available API versions",
        "operationId": "getAPIVersions",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apis"
        ]
      }
    },
    "/apis/management.loft.sh/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getManagementLoftShAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh"
        ]
      }
    },
    "/apis/management.loft.sh/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "description": "get available resources",
        "operationId": "getManagementLoftShV1APIResources",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ]
      }
    },
    "/apis/management.loft.sh/v1/announcements": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Announcement",
        "operationId": "listManagementLoftShV1Announcement",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AnnouncementList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Announcement",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/apps": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of App",
        "operationId": "deleteManagementLoftShV1CollectionApp",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind App",
        "operationId": "listManagementLoftShV1App",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.AppList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an App",
        "operationId": "createManagementLoftShV1App",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/apps/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an App",
        "operationId": "deleteManagementLoftShV1App",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified App",
        "operationId": "readManagementLoftShV1App",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the App",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified App",
        "operationId": "patchManagementLoftShV1App",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified App",
        "operationId": "replaceManagementLoftShV1App",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.App"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "App",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusteraccesses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterAccess",
        "operationId": "deleteManagementLoftShV1CollectionClusterAccess",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind ClusterAccess",
        "operationId": "listManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccessList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterAccess",
        "operationId": "createManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusteraccesses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterAccess",
        "operationId": "deleteManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterAccess",
        "operationId": "readManagementLoftShV1ClusterAccess",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterAccess",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterAccess",
        "operationId": "patchManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterAccess",
        "operationId": "replaceManagementLoftShV1ClusterAccess",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccess",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusteraccounttemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterAccountTemplate",
        "operationId": "deleteManagementLoftShV1CollectionClusterAccountTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind ClusterAccountTemplate",
        "operationId": "listManagementLoftShV1ClusterAccountTemplate",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplateList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterAccountTemplate",
        "operationId": "createManagementLoftShV1ClusterAccountTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusteraccounttemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterAccountTemplate",
        "operationId": "deleteManagementLoftShV1ClusterAccountTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterAccountTemplate",
        "operationId": "readManagementLoftShV1ClusterAccountTemplate",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterAccountTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterAccountTemplate",
        "operationId": "patchManagementLoftShV1ClusterAccountTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterAccountTemplate",
        "operationId": "replaceManagementLoftShV1ClusterAccountTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterAccountTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterAccountTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusterconnect": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterConnect",
        "operationId": "createManagementLoftShV1ClusterConnect",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnect"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnect"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnect"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterConnect"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterConnect",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusterroletemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRoleTemplate",
        "operationId": "deleteManagementLoftShV1CollectionClusterRoleTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind ClusterRoleTemplate",
        "operationId": "listManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplateList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterRoleTemplate",
        "operationId": "createManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusterroletemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterRoleTemplate",
        "operationId": "deleteManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterRoleTemplate",
        "operationId": "readManagementLoftShV1ClusterRoleTemplate",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterRoleTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterRoleTemplate",
        "operationId": "patchManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterRoleTemplate",
        "operationId": "replaceManagementLoftShV1ClusterRoleTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterRoleTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterRoleTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Cluster",
        "operationId": "deleteManagementLoftShV1CollectionCluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Cluster",
        "operationId": "listManagementLoftShV1Cluster",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Cluster",
        "operationId": "createManagementLoftShV1Cluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Cluster",
        "operationId": "deleteManagementLoftShV1Cluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Cluster",
        "operationId": "readManagementLoftShV1Cluster",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Cluster",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Cluster",
        "operationId": "patchManagementLoftShV1Cluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Cluster",
        "operationId": "replaceManagementLoftShV1Cluster",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Cluster"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Cluster",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}/charts": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read charts of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterCharts",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterCharts"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterCharts",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterCharts",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create charts of a Cluster",
        "operationId": "createManagementLoftShV1ClusterCharts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterCharts"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterCharts"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterCharts"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterCharts"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterCharts",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}/domain": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read domain of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterDomain",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterDomain"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterDomain",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterDomain",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create domain of a Cluster",
        "operationId": "createManagementLoftShV1ClusterDomain",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterDomain"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterDomain"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterDomain"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterDomain"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterDomain",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}/memberaccess": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read memberaccess of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterMemberaccess",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMemberAccess"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterMemberAccess",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterMemberAccess",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/clusters/{name}/members": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read members of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterMembers",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterMembers"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterMembers",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterMembers",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/clusters/{name}/reset": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "name of the ClusterReset",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create reset of a Cluster",
        "operationId": "createManagementLoftShV1ClusterReset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterReset"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterReset"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterReset"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterReset"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterReset",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/clusters/{name}/virtualclusterdefaults": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read virtualclusterdefaults of the specified Cluster",
        "operationId": "readManagementLoftShV1ClusterVirtualclusterdefaults",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ClusterVirtualClusterDefaults"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ClusterVirtualClusterDefaults",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the ClusterVirtualClusterDefaults",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/configs": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Config",
        "operationId": "listManagementLoftShV1Config",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ConfigList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Config",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Config",
        "operationId": "createManagementLoftShV1Config",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Config"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Config"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Config"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Config"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Config",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/configs/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Config",
        "operationId": "readManagementLoftShV1Config",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Config"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Config",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Config",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/directclusterendpointtokens": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a DirectClusterEndpointToken",
        "operationId": "createManagementLoftShV1DirectClusterEndpointToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointToken"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointToken"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointToken"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.DirectClusterEndpointToken"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "DirectClusterEndpointToken",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/events": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Event",
        "operationId": "listManagementLoftShV1Event",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.EventList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Event",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/features": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Feature",
        "operationId": "listManagementLoftShV1Feature",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.FeatureList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/features/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Feature",
        "operationId": "readManagementLoftShV1Feature",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Feature"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Feature",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Feature",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/kiosk/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Kiosk",
        "operationId": "readManagementLoftShV1Kiosk",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Kiosk"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Kiosk",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Kiosk",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/licenses": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind License",
        "operationId": "listManagementLoftShV1License",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "License",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/licenses/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified License",
        "operationId": "readManagementLoftShV1License",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.License"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "License",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the License",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/licensetokens": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a LicenseToken",
        "operationId": "createManagementLoftShV1LicenseToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseToken"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseToken"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseToken"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LicenseToken"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "LicenseToken",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/loftupgrades": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a LoftUpgrade",
        "operationId": "createManagementLoftShV1LoftUpgrade",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgrade"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgrade"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgrade"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.LoftUpgrade"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "LoftUpgrade",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/sharedsecrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind SharedSecret",
        "operationId": "listManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecretList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SharedSecret",
        "operationId": "createManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/namespaces/{namespace}/sharedsecrets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a SharedSecret",
        "operationId": "deleteManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified SharedSecret",
        "operationId": "readManagementLoftShV1NamespacedSharedSecret",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the SharedSecret",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified SharedSecret",
        "operationId": "patchManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified SharedSecret",
        "operationId": "replaceManagementLoftShV1NamespacedSharedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecret"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/ownedaccesskeys": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an OwnedAccessKey",
        "operationId": "createManagementLoftShV1OwnedAccessKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/ownedaccesskeys/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an OwnedAccessKey",
        "operationId": "deleteManagementLoftShV1OwnedAccessKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified OwnedAccessKey",
        "operationId": "readManagementLoftShV1OwnedAccessKey",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the OwnedAccessKey",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified OwnedAccessKey",
        "operationId": "patchManagementLoftShV1OwnedAccessKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified OwnedAccessKey",
        "operationId": "replaceManagementLoftShV1OwnedAccessKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.OwnedAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "OwnedAccessKey",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/policyviolations": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind PolicyViolation",
        "operationId": "listManagementLoftShV1PolicyViolation",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.PolicyViolationList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "PolicyViolation",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/resetaccesskeys": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ResetAccessKey",
        "operationId": "createManagementLoftShV1ResetAccessKey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKey"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKey"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKey"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.ResetAccessKey"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "ResetAccessKey",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/selfsubjectaccessreviews": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SelfSubjectAccessReview",
        "operationId": "createManagementLoftShV1SelfSubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReview"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReview"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReview"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SelfSubjectAccessReview"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/selves": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Self",
        "operationId": "createManagementLoftShV1Self",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Self"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Self"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Self"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Self"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Self",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/selves/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Self",
        "operationId": "readManagementLoftShV1Self",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Self"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Self",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Self",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/sharedsecrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind SharedSecret",
        "operationId": "listManagementLoftShV1SharedSecretForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SharedSecretList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SharedSecret",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/spaceconstraints": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of SpaceConstraint",
        "operationId": "deleteManagementLoftShV1CollectionSpaceConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind SpaceConstraint",
        "operationId": "listManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraintList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SpaceConstraint",
        "operationId": "createManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/spaceconstraints/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a SpaceConstraint",
        "operationId": "deleteManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified SpaceConstraint",
        "operationId": "readManagementLoftShV1SpaceConstraint",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the SpaceConstraint",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified SpaceConstraint",
        "operationId": "patchManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified SpaceConstraint",
        "operationId": "replaceManagementLoftShV1SpaceConstraint",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceConstraint"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceConstraint",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/spacetemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of SpaceTemplate",
        "operationId": "deleteManagementLoftShV1CollectionSpaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind SpaceTemplate",
        "operationId": "listManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplateList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SpaceTemplate",
        "operationId": "createManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/spacetemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a SpaceTemplate",
        "operationId": "deleteManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified SpaceTemplate",
        "operationId": "readManagementLoftShV1SpaceTemplate",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the SpaceTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified SpaceTemplate",
        "operationId": "patchManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified SpaceTemplate",
        "operationId": "replaceManagementLoftShV1SpaceTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SpaceTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SpaceTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/subjectaccessreviews": {
      "parameters": [
        {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "in": "query",
          "name": "dryRun",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
          "in": "query",
          "name": "fieldManager",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SubjectAccessReview",
        "operationId": "createManagementLoftShV1SubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReview"
            }
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReview"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReview"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.SubjectAccessReview"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/tasks": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Task",
        "operationId": "deleteManagementLoftShV1CollectionTask",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Task",
        "operationId": "listManagementLoftShV1Task",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TaskList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Task",
        "operationId": "createManagementLoftShV1Task",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/tasks/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Task",
        "operationId": "deleteManagementLoftShV1Task",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Task",
        "operationId": "readManagementLoftShV1Task",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Task",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Task",
        "operationId": "patchManagementLoftShV1Task",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Task",
        "operationId": "replaceManagementLoftShV1Task",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Task"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Task",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/tasks/{name}/log": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read log of the specified Task",
        "operationId": "readManagementLoftShV1TaskLog",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TaskLog"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "TaskLog",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "in": "query",
          "name": "follow",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "in": "query",
          "name": "insecureSkipTLSVerifyBackend",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "in": "query",
          "name": "limitBytes",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "name of the TaskLog",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "in": "query",
          "name": "previous",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "in": "query",
          "name": "sinceSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "in": "query",
          "name": "tailLines",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "in": "query",
          "name": "timestamps",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/teams": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Team",
        "operationId": "deleteManagementLoftShV1CollectionTeam",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind Team",
        "operationId": "listManagementLoftShV1Team",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Team",
        "operationId": "createManagementLoftShV1Team",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/teams/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Team",
        "operationId": "deleteManagementLoftShV1Team",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Team",
        "operationId": "readManagementLoftShV1Team",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the Team",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Team",
        "operationId": "patchManagementLoftShV1Team",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Team",
        "operationId": "replaceManagementLoftShV1Team",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.Team"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "Team",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/teams/{name}/accesskeys": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read accesskeys of the specified Team",
        "operationId": "readManagementLoftShV1TeamAccesskeys",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamAccessKeys"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "TeamAccessKeys",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the TeamAccessKeys",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/teams/{name}/clusters": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read clusters of the specified Team",
        "operationId": "readManagementLoftShV1TeamClusters",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.TeamClusters"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "TeamClusters",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the TeamClusters",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/users": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of User",
        "operationId": "deleteManagementLoftShV1CollectionUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind User",
        "operationId": "listManagementLoftShV1User",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an User",
        "operationId": "createManagementLoftShV1User",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/users/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an User",
        "operationId": "deleteManagementLoftShV1User",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified User",
        "operationId": "readManagementLoftShV1User",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the User",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified User",
        "operationId": "patchManagementLoftShV1User",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified User",
        "operationId": "replaceManagementLoftShV1User",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.User"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "User",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/users/{name}/accesskeys": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read accesskeys of the specified User",
        "operationId": "readManagementLoftShV1UserAccesskeys",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserAccessKeys"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserAccessKeys",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the UserAccessKeys",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/users/{name}/clusters": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read clusters of the specified User",
        "operationId": "readManagementLoftShV1UserClusters",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserClusters"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserClusters",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the UserClusters",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    },
    "/apis/management.loft.sh/v1/users/{name}/profile": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read profile of the specified User",
        "operationId": "readManagementLoftShV1UserProfile",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserProfile"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserProfile",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the UserProfile",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create profile of an User",
        "operationId": "createManagementLoftShV1UserProfile",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserProfile"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserProfile"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserProfile"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.UserProfile"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "UserProfile",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/virtualclustertemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of VirtualClusterTemplate",
        "operationId": "deleteManagementLoftShV1CollectionVirtualClusterTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind VirtualClusterTemplate",
        "operationId": "listManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
            "in": "query",
            "name": "allowWatchBookmarks",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
            "in": "query",
            "name": "continue",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
            "in": "query",
            "name": "fieldSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
            "in": "query",
            "name": "labelSelector",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
            "in": "query",
            "name": "limit",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersion",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
            "in": "query",
            "name": "resourceVersionMatch",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
            "in": "query",
            "name": "timeoutSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
            "in": "query",
            "name": "watch",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplateList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a VirtualClusterTemplate",
        "operationId": "createManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/management.loft.sh/v1/virtualclustertemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a VirtualClusterTemplate",
        "operationId": "deleteManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "in": "query",
            "name": "gracePeriodSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
            "in": "query",
            "name": "orphanDependents",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "in": "query",
            "name": "propagationPolicy",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified VirtualClusterTemplate",
        "operationId": "readManagementLoftShV1VirtualClusterTemplate",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the VirtualClusterTemplate",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ],
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified VirtualClusterTemplate",
        "operationId": "patchManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
            "in": "query",
            "name": "force",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified VirtualClusterTemplate",
        "operationId": "replaceManagementLoftShV1VirtualClusterTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "in": "query",
            "name": "dryRun",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
            "in": "query",
            "name": "fieldManager",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.management.v1.VirtualClusterTemplate"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "managementLoftSh_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "management.loft.sh",
          "kind": "VirtualClusterTemplate",
          "version": "v1"
        }
      }
    },
    "/apis/virtualcluster.loft.sh/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getVirtualclusterLoftShAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh"
        ]
      }
    },
    "/apis/virtualcluster.loft.sh/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml"
        ],
        "description": "get available resources",
        "operationId": "getVirtualclusterLoftShV1APIResources",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh_v1"
        ]
      }
    },
    "/apis/virtualcluster.loft.sh/v1/helmreleases": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind HelmRelease",
        "operationId": "listVirtualclusterLoftShV1HelmReleaseForAllNamespaces",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmReleaseList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/virtualcluster.loft.sh/v1/namespaces/{namespace}/helmreleases": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind HelmRelease",
        "operationId": "listVirtualclusterLoftShV1NamespacedHelmRelease",
        "produces": [
          "application/json",
          "application/yaml",
          "application/json;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmReleaseList"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.",
          "in": "query",
          "name": "allowWatchBookmarks",
          "type": "boolean",
          "uniqueItems": true
        },
        {
          "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
          "in": "query",
          "name": "continue",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
          "in": "query",
          "name": "fieldSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
          "in": "query",
          "name": "labelSelector",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
          "in": "query",
          "name": "limit",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersion",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset",
          "in": "query",
          "name": "resourceVersionMatch",
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
          "in": "query",
          "name": "timeoutSeconds",
          "type": "integer",
          "uniqueItems": true
        },
        {
          "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
          "in": "query",
          "name": "watch",
          "type": "boolean",
          "uniqueItems": true
        }
      ]
    },
    "/apis/virtualcluster.loft.sh/v1/namespaces/{namespace}/helmreleases/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified HelmRelease",
        "operationId": "readVirtualclusterLoftShV1NamespacedHelmRelease",
        "produces": [
          "application/json",
          "application/yaml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/com.github.loft-sh.api.v2.pkg.apis.virtualcluster.v1.HelmRelease"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "virtualclusterLoftSh_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "virtualcluster.loft.sh",
          "kind": "HelmRelease",
          "version": "v1"
        }
      },
      "parameters": [
        {
          "description": "name of the HelmRelease",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "object name and auth scope, such as for teams and projects",
          "in": "path",
          "name": "namespace",
          "required": true,
          "type": "string",
          "uniqueItems": true
        },
        {
          "description": "If 'true', then the output is pretty printed.",
          "in": "query",
          "name": "pretty",
          "type": "string",
          "uniqueItems": true
        }
      ]
    }
  },
  "swagger": "2.0"
}
